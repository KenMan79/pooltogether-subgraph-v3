// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SingleRandomWinnerPrizePoolCreated extends ethereum.Event {
  get params(): SingleRandomWinnerPrizePoolCreated__Params {
    return new SingleRandomWinnerPrizePoolCreated__Params(this);
  }
}

export class SingleRandomWinnerPrizePoolCreated__Params {
  _event: SingleRandomWinnerPrizePoolCreated;

  constructor(event: SingleRandomWinnerPrizePoolCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prizePool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get singleRandomWinnerPrizeStrategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SingleRandomWinnerPrizePoolBuilder extends ethereum.SmartContract {
  static bind(address: Address): SingleRandomWinnerPrizePoolBuilder {
    return new SingleRandomWinnerPrizePoolBuilder(
      "SingleRandomWinnerPrizePoolBuilder",
      address
    );
  }

  createSingleRandomWinnerPrizePool(
    cToken: Address,
    prizePeriodInSeconds: BigInt,
    _ticketName: string,
    _ticketSymbol: string,
    _sponsorshipName: string,
    _sponsorshipSymbol: string
  ): Address {
    let result = super.call(
      "createSingleRandomWinnerPrizePool",
      "createSingleRandomWinnerPrizePool(address,uint256,string,string,string,string):(address)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(prizePeriodInSeconds),
        ethereum.Value.fromString(_ticketName),
        ethereum.Value.fromString(_ticketSymbol),
        ethereum.Value.fromString(_sponsorshipName),
        ethereum.Value.fromString(_sponsorshipSymbol)
      ]
    );

    return result[0].toAddress();
  }

  try_createSingleRandomWinnerPrizePool(
    cToken: Address,
    prizePeriodInSeconds: BigInt,
    _ticketName: string,
    _ticketSymbol: string,
    _sponsorshipName: string,
    _sponsorshipSymbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSingleRandomWinnerPrizePool",
      "createSingleRandomWinnerPrizePool(address,uint256,string,string,string,string):(address)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(prizePeriodInSeconds),
        ethereum.Value.fromString(_ticketName),
        ethereum.Value.fromString(_ticketSymbol),
        ethereum.Value.fromString(_sponsorshipName),
        ethereum.Value.fromString(_sponsorshipSymbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizePoolBuilder(): Address {
    let result = super.call(
      "prizePoolBuilder",
      "prizePoolBuilder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_prizePoolBuilder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prizePoolBuilder",
      "prizePoolBuilder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizeStrategyFactory(): Address {
    let result = super.call(
      "prizeStrategyFactory",
      "prizeStrategyFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_prizeStrategyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prizeStrategyFactory",
      "prizeStrategyFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateSingleRandomWinnerPrizePoolCall extends ethereum.Call {
  get inputs(): CreateSingleRandomWinnerPrizePoolCall__Inputs {
    return new CreateSingleRandomWinnerPrizePoolCall__Inputs(this);
  }

  get outputs(): CreateSingleRandomWinnerPrizePoolCall__Outputs {
    return new CreateSingleRandomWinnerPrizePoolCall__Outputs(this);
  }
}

export class CreateSingleRandomWinnerPrizePoolCall__Inputs {
  _call: CreateSingleRandomWinnerPrizePoolCall;

  constructor(call: CreateSingleRandomWinnerPrizePoolCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get prizePeriodInSeconds(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ticketName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _ticketSymbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _sponsorshipName(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _sponsorshipSymbol(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateSingleRandomWinnerPrizePoolCall__Outputs {
  _call: CreateSingleRandomWinnerPrizePoolCall;

  constructor(call: CreateSingleRandomWinnerPrizePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _prizePoolBuilder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _prizeStrategyFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}
