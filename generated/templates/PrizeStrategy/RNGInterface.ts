// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RandomNumberCompleted extends ethereum.Event {
  get params(): RandomNumberCompleted__Params {
    return new RandomNumberCompleted__Params(this);
  }
}

export class RandomNumberCompleted__Params {
  _event: RandomNumberCompleted;

  constructor(event: RandomNumberCompleted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get randomNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RandomNumberRequested extends ethereum.Event {
  get params(): RandomNumberRequested__Params {
    return new RandomNumberRequested__Params(this);
  }
}

export class RandomNumberRequested__Params {
  _event: RandomNumberRequested;

  constructor(event: RandomNumberRequested) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get budget(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RNGInterface__requestRandomNumberResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class RNGInterface extends ethereum.SmartContract {
  static bind(address: Address): RNGInterface {
    return new RNGInterface("RNGInterface", address);
  }

  isRequestComplete(id: BigInt): boolean {
    let result = super.call(
      "isRequestComplete",
      "isRequestComplete(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBoolean();
  }

  try_isRequestComplete(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRequestComplete",
      "isRequestComplete(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  randomNumber(id: BigInt): BigInt {
    let result = super.call("randomNumber", "randomNumber(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_randomNumber(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "randomNumber",
      "randomNumber(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestRandomNumber(
    token: Address,
    budget: BigInt
  ): RNGInterface__requestRandomNumberResult {
    let result = super.call(
      "requestRandomNumber",
      "requestRandomNumber(address,uint256):(uint32,uint32)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(budget)
      ]
    );

    return new RNGInterface__requestRandomNumberResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_requestRandomNumber(
    token: Address,
    budget: BigInt
  ): ethereum.CallResult<RNGInterface__requestRandomNumberResult> {
    let result = super.tryCall(
      "requestRandomNumber",
      "requestRandomNumber(address,uint256):(uint32,uint32)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(budget)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RNGInterface__requestRandomNumberResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class RequestRandomNumberCall extends ethereum.Call {
  get inputs(): RequestRandomNumberCall__Inputs {
    return new RequestRandomNumberCall__Inputs(this);
  }

  get outputs(): RequestRandomNumberCall__Outputs {
    return new RequestRandomNumberCall__Outputs(this);
  }
}

export class RequestRandomNumberCall__Inputs {
  _call: RequestRandomNumberCall;

  constructor(call: RequestRandomNumberCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get budget(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestRandomNumberCall__Outputs {
  _call: RequestRandomNumberCall;

  constructor(call: RequestRandomNumberCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get lockBlock(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
