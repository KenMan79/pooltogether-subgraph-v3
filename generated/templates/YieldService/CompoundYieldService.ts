// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PrincipalCaptured extends ethereum.Event {
  get params(): PrincipalCaptured__Params {
    return new PrincipalCaptured__Params(this);
  }
}

export class PrincipalCaptured__Params {
  _event: PrincipalCaptured;

  constructor(event: PrincipalCaptured) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrincipalRedeemed extends ethereum.Event {
  get params(): PrincipalRedeemed__Params {
    return new PrincipalRedeemed__Params(this);
  }
}

export class PrincipalRedeemed__Params {
  _event: PrincipalRedeemed;

  constructor(event: PrincipalRedeemed) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrincipalSupplied extends ethereum.Event {
  get params(): PrincipalSupplied__Params {
    return new PrincipalSupplied__Params(this);
  }
}

export class PrincipalSupplied__Params {
  _event: PrincipalSupplied;

  constructor(event: PrincipalSupplied) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CompoundYieldService extends ethereum.SmartContract {
  static bind(address: Address): CompoundYieldService {
    return new CompoundYieldService("CompoundYieldService", address);
  }

  accountedBalance(): BigInt {
    let result = super.call(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accountedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cToken(): Address {
    let result = super.call("cToken", "cToken():(address)", []);

    return result[0].toAddress();
  }

  try_cToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("cToken", "cToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canImplementInterfaceForAddress(interfaceHash: Bytes, addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  estimateAccruedInterestOverBlocks(
    principalAmount: BigInt,
    blocks: BigInt
  ): BigInt {
    let result = super.call(
      "estimateAccruedInterestOverBlocks",
      "estimateAccruedInterestOverBlocks(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principalAmount),
        ethereum.Value.fromUnsignedBigInt(blocks)
      ]
    );

    return result[0].toBigInt();
  }

  try_estimateAccruedInterestOverBlocks(
    principalAmount: BigInt,
    blocks: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateAccruedInterestOverBlocks",
      "estimateAccruedInterestOverBlocks(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principalAmount),
        ethereum.Value.fromUnsignedBigInt(blocks)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashName(): Bytes {
    let result = super.call("hashName", "hashName():(bytes32)", []);

    return result[0].toBytes();
  }

  try_hashName(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashName", "hashName():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unaccountedBalance(): BigInt {
    let result = super.call(
      "unaccountedBalance",
      "unaccountedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unaccountedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unaccountedBalance",
      "unaccountedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BalanceCall extends ethereum.Call {
  get inputs(): BalanceCall__Inputs {
    return new BalanceCall__Inputs(this);
  }

  get outputs(): BalanceCall__Outputs {
    return new BalanceCall__Outputs(this);
  }
}

export class BalanceCall__Inputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }
}

export class BalanceCall__Outputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CaptureCall extends ethereum.Call {
  get inputs(): CaptureCall__Inputs {
    return new CaptureCall__Inputs(this);
  }

  get outputs(): CaptureCall__Outputs {
    return new CaptureCall__Outputs(this);
  }
}

export class CaptureCall__Inputs {
  _call: CaptureCall;

  constructor(call: CaptureCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CaptureCall__Outputs {
  _call: CaptureCall;

  constructor(call: CaptureCall) {
    this._call = call;
  }
}

export class ConstructCall extends ethereum.Call {
  get inputs(): ConstructCall__Inputs {
    return new ConstructCall__Inputs(this);
  }

  get outputs(): ConstructCall__Outputs {
    return new ConstructCall__Outputs(this);
  }
}

export class ConstructCall__Inputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructCall__Outputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _cToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class SupplyCall extends ethereum.Call {
  get inputs(): SupplyCall__Inputs {
    return new SupplyCall__Inputs(this);
  }

  get outputs(): SupplyCall__Outputs {
    return new SupplyCall__Outputs(this);
  }
}

export class SupplyCall__Inputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyCall__Outputs {
  _call: SupplyCall;

  constructor(call: SupplyCall) {
    this._call = call;
  }
}

export class UnaccountedBalanceCall extends ethereum.Call {
  get inputs(): UnaccountedBalanceCall__Inputs {
    return new UnaccountedBalanceCall__Inputs(this);
  }

  get outputs(): UnaccountedBalanceCall__Outputs {
    return new UnaccountedBalanceCall__Outputs(this);
  }
}

export class UnaccountedBalanceCall__Inputs {
  _call: UnaccountedBalanceCall;

  constructor(call: UnaccountedBalanceCall) {
    this._call = call;
  }
}

export class UnaccountedBalanceCall__Outputs {
  _call: UnaccountedBalanceCall;

  constructor(call: UnaccountedBalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
