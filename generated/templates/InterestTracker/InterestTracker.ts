// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollateralRedeemed extends ethereum.Event {
  get params(): CollateralRedeemed__Params {
    return new CollateralRedeemed__Params(this);
  }
}

export class CollateralRedeemed__Params {
  _event: CollateralRedeemed;

  constructor(event: CollateralRedeemed) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interestCredited(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CollateralSupplied extends ethereum.Event {
  get params(): CollateralSupplied__Params {
    return new CollateralSupplied__Params(this);
  }
}

export class CollateralSupplied__Params {
  _event: CollateralSupplied;

  constructor(event: CollateralSupplied) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InterestAccrued extends ethereum.Event {
  get params(): InterestAccrued__Params {
    return new InterestAccrued__Params(this);
  }
}

export class InterestAccrued__Params {
  _event: InterestAccrued;

  constructor(event: InterestAccrued) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InterestTracker extends ethereum.SmartContract {
  static bind(address: Address): InterestTracker {
    return new InterestTracker("InterestTracker", address);
  }

  balanceOf(user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfCollateral(user: Address): BigInt {
    let result = super.call(
      "balanceOfCollateral",
      "balanceOfCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfCollateral(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfCollateral",
      "balanceOfCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfInterest(user: Address): BigInt {
    let result = super.call(
      "balanceOfInterest",
      "balanceOfInterest(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfInterest(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfInterest",
      "balanceOfInterest(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canImplementInterfaceForAddress(interfaceHash: Bytes, addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exchangeRateMantissa(): BigInt {
    let result = super.call(
      "exchangeRateMantissa",
      "exchangeRateMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateMantissa",
      "exchangeRateMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashName(): Bytes {
    let result = super.call("hashName", "hashName():(bytes32)", []);

    return result[0].toBytes();
  }

  try_hashName(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashName", "hashName():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  interestRatioMantissa(user: Address): BigInt {
    let result = super.call(
      "interestRatioMantissa",
      "interestRatioMantissa(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_interestRatioMantissa(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestRatioMantissa",
      "interestRatioMantissa(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalContributions(): BigInt {
    let result = super.call(
      "totalContributions",
      "totalContributions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalContributions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalContributions",
      "totalContributions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }

  get _collateral(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class ConstructCall extends ethereum.Call {
  get inputs(): ConstructCall__Inputs {
    return new ConstructCall__Inputs(this);
  }

  get outputs(): ConstructCall__Outputs {
    return new ConstructCall__Outputs(this);
  }
}

export class ConstructCall__Inputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructCall__Outputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }
}

export class SupplyCollateralCall extends ethereum.Call {
  get inputs(): SupplyCollateralCall__Inputs {
    return new SupplyCollateralCall__Inputs(this);
  }

  get outputs(): SupplyCollateralCall__Outputs {
    return new SupplyCollateralCall__Outputs(this);
  }
}

export class SupplyCollateralCall__Inputs {
  _call: SupplyCollateralCall;

  constructor(call: SupplyCollateralCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SupplyCollateralCall__Outputs {
  _call: SupplyCollateralCall;

  constructor(call: SupplyCollateralCall) {
    this._call = call;
  }
}

export class TransferCollateralCall extends ethereum.Call {
  get inputs(): TransferCollateralCall__Inputs {
    return new TransferCollateralCall__Inputs(this);
  }

  get outputs(): TransferCollateralCall__Outputs {
    return new TransferCollateralCall__Outputs(this);
  }
}

export class TransferCollateralCall__Inputs {
  _call: TransferCollateralCall;

  constructor(call: TransferCollateralCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCollateralCall__Outputs {
  _call: TransferCollateralCall;

  constructor(call: TransferCollateralCall) {
    this._call = call;
  }
}
