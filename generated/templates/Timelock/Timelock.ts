// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollateralSwept extends ethereum.Event {
  get params(): CollateralSwept__Params {
    return new CollateralSwept__Params(this);
  }
}

export class CollateralSwept__Params {
  _event: CollateralSwept;

  constructor(event: CollateralSwept) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralTimelocked extends ethereum.Event {
  get params(): CollateralTimelocked__Params {
    return new CollateralTimelocked__Params(this);
  }
}

export class CollateralTimelocked__Params {
  _event: CollateralTimelocked;

  constructor(event: CollateralTimelocked) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Timelock extends ethereum.SmartContract {
  static bind(address: Address): Timelock {
    return new Timelock("Timelock", address);
  }

  balanceAvailableAt(user: Address): BigInt {
    let result = super.call(
      "balanceAvailableAt",
      "balanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceAvailableAt(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceAvailableAt",
      "balanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canImplementInterfaceForAddress(interfaceHash: Bytes, addr: Address): Bytes {
    let result = super.call(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );

    return result[0].toBytes();
  }

  try_canImplementInterfaceForAddress(
    interfaceHash: Bytes,
    addr: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "canImplementInterfaceForAddress",
      "canImplementInterfaceForAddress(bytes32,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(interfaceHash),
        ethereum.Value.fromAddress(addr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashName(): Bytes {
    let result = super.call("hashName", "hashName():(bytes32)", []);

    return result[0].toBytes();
  }

  try_hashName(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashName", "hashName():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sweep(users: Array<Address>): BigInt {
    let result = super.call("sweep", "sweep(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(users)
    ]);

    return result[0].toBigInt();
  }

  try_sweep(users: Array<Address>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sweep", "sweep(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(users)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructCall extends ethereum.Call {
  get inputs(): ConstructCall__Inputs {
    return new ConstructCall__Inputs(this);
  }

  get outputs(): ConstructCall__Outputs {
    return new ConstructCall__Outputs(this);
  }
}

export class ConstructCall__Inputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructCall__Outputs {
  _call: ConstructCall;

  constructor(call: ConstructCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
