// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollateralRedeemed extends ethereum.Event {
  get params(): CollateralRedeemed__Params {
    return new CollateralRedeemed__Params(this);
  }
}

export class CollateralRedeemed__Params {
  _event: CollateralRedeemed;

  constructor(event: CollateralRedeemed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralSupplied extends ethereum.Event {
  get params(): CollateralSupplied__Params {
    return new CollateralSupplied__Params(this);
  }
}

export class CollateralSupplied__Params {
  _event: CollateralSupplied;

  constructor(event: CollateralSupplied) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralSwept extends ethereum.Event {
  get params(): CollateralSwept__Params {
    return new CollateralSwept__Params(this);
  }
}

export class CollateralSwept__Params {
  _event: CollateralSwept;

  constructor(event: CollateralSwept) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralTimelocked extends ethereum.Event {
  get params(): CollateralTimelocked__Params {
    return new CollateralTimelocked__Params(this);
  }
}

export class CollateralTimelocked__Params {
  _event: CollateralTimelocked;

  constructor(event: CollateralTimelocked) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InterestCaptured extends ethereum.Event {
  get params(): InterestCaptured__Params {
    return new InterestCaptured__Params(this);
  }
}

export class InterestCaptured__Params {
  _event: InterestCaptured;

  constructor(event: InterestCaptured) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrincipalCaptured extends ethereum.Event {
  get params(): PrincipalCaptured__Params {
    return new PrincipalCaptured__Params(this);
  }
}

export class PrincipalCaptured__Params {
  _event: PrincipalCaptured;

  constructor(event: PrincipalCaptured) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrincipalRedeemed extends ethereum.Event {
  get params(): PrincipalRedeemed__Params {
    return new PrincipalRedeemed__Params(this);
  }
}

export class PrincipalRedeemed__Params {
  _event: PrincipalRedeemed;

  constructor(event: PrincipalRedeemed) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrincipalSupplied extends ethereum.Event {
  get params(): PrincipalSupplied__Params {
    return new PrincipalSupplied__Params(this);
  }
}

export class PrincipalSupplied__Params {
  _event: PrincipalSupplied;

  constructor(event: PrincipalSupplied) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrizePoolAwardCompleted extends ethereum.Event {
  get params(): PrizePoolAwardCompleted__Params {
    return new PrizePoolAwardCompleted__Params(this);
  }
}

export class PrizePoolAwardCompleted__Params {
  _event: PrizePoolAwardCompleted;

  constructor(event: PrizePoolAwardCompleted) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prize(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reserveFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get randomNumber(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class PrizePoolAwardStarted extends ethereum.Event {
  get params(): PrizePoolAwardStarted__Params {
    return new PrizePoolAwardStarted__Params(this);
  }
}

export class PrizePoolAwardStarted__Params {
  _event: PrizePoolAwardStarted;

  constructor(event: PrizePoolAwardStarted) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rngRequestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrizePoolOpened extends ethereum.Event {
  get params(): PrizePoolOpened__Params {
    return new PrizePoolOpened__Params(this);
  }
}

export class PrizePoolOpened__Params {
  _event: PrizePoolOpened;

  constructor(event: PrizePoolOpened) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prizePeriodStartedAt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TicketsRedeemedInstantly extends ethereum.Event {
  get params(): TicketsRedeemedInstantly__Params {
    return new TicketsRedeemedInstantly__Params(this);
  }
}

export class TicketsRedeemedInstantly__Params {
  _event: TicketsRedeemedInstantly;

  constructor(event: TicketsRedeemedInstantly) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get exitFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class TicketsRedeemedWithTimelock extends ethereum.Event {
  get params(): TicketsRedeemedWithTimelock__Params {
    return new TicketsRedeemedWithTimelock__Params(this);
  }
}

export class TicketsRedeemedWithTimelock__Params {
  _event: TicketsRedeemedWithTimelock;

  constructor(event: TicketsRedeemedWithTimelock) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tickets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class CompoundPeriodicPrizePool extends ethereum.SmartContract {
  static bind(address: Address): CompoundPeriodicPrizePool {
    return new CompoundPeriodicPrizePool("CompoundPeriodicPrizePool", address);
  }

  accountedBalance(): BigInt {
    let result = super.call(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accountedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfInterestShares(user: Address): BigInt {
    let result = super.call(
      "balanceOfInterestShares",
      "balanceOfInterestShares(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfInterestShares(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfInterestShares",
      "balanceOfInterestShares(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfTicketInterest(user: Address): BigInt {
    let result = super.call(
      "balanceOfTicketInterest",
      "balanceOfTicketInterest(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfTicketInterest(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfTicketInterest",
      "balanceOfTicketInterest(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfTicketInterestShares(user: Address): BigInt {
    let result = super.call(
      "balanceOfTicketInterestShares",
      "balanceOfTicketInterestShares(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfTicketInterestShares(
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfTicketInterestShares",
      "balanceOfTicketInterestShares(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cToken(): Address {
    let result = super.call("cToken", "cToken():(address)", []);

    return result[0].toAddress();
  }

  try_cToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("cToken", "cToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateExitFee(tickets: BigInt, userInterestRatio: BigInt): BigInt {
    let result = super.call(
      "calculateExitFee",
      "calculateExitFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromUnsignedBigInt(userInterestRatio)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateExitFee(
    tickets: BigInt,
    userInterestRatio: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateExitFee",
      "calculateExitFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromUnsignedBigInt(userInterestRatio)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateUnlockTimestamp(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "calculateUnlockTimestamp",
      "calculateUnlockTimestamp(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateUnlockTimestamp(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateUnlockTimestamp",
      "calculateUnlockTimestamp(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canCompleteAward(): boolean {
    let result = super.call(
      "canCompleteAward",
      "canCompleteAward():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_canCompleteAward(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canCompleteAward",
      "canCompleteAward():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canStartAward(): boolean {
    let result = super.call("canStartAward", "canStartAward():(bool)", []);

    return result[0].toBoolean();
  }

  try_canStartAward(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canStartAward", "canStartAward():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collateralValueOfShares(shares: BigInt): BigInt {
    let result = super.call(
      "collateralValueOfShares",
      "collateralValueOfShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );

    return result[0].toBigInt();
  }

  try_collateralValueOfShares(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralValueOfShares",
      "collateralValueOfShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentPrize(): BigInt {
    let result = super.call("currentPrize", "currentPrize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentPrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentPrize", "currentPrize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatePrize(): BigInt {
    let result = super.call("estimatePrize", "estimatePrize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_estimatePrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatePrize",
      "estimatePrize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatePrizeWithBlockTime(secondsPerBlockFixedPoint18: BigInt): BigInt {
    let result = super.call(
      "estimatePrizeWithBlockTime",
      "estimatePrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );

    return result[0].toBigInt();
  }

  try_estimatePrizeWithBlockTime(
    secondsPerBlockFixedPoint18: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatePrizeWithBlockTime",
      "estimatePrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateRemainingBlocksToPrize(secondsPerBlockFixedPoint18: BigInt): BigInt {
    let result = super.call(
      "estimateRemainingBlocksToPrize",
      "estimateRemainingBlocksToPrize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );

    return result[0].toBigInt();
  }

  try_estimateRemainingBlocksToPrize(
    secondsPerBlockFixedPoint18: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateRemainingBlocksToPrize",
      "estimateRemainingBlocksToPrize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateRemainingPrize(): BigInt {
    let result = super.call(
      "estimateRemainingPrize",
      "estimateRemainingPrize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimateRemainingPrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateRemainingPrize",
      "estimateRemainingPrize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateRemainingPrizeWithBlockTime(
    secondsPerBlockFixedPoint18: BigInt
  ): BigInt {
    let result = super.call(
      "estimateRemainingPrizeWithBlockTime",
      "estimateRemainingPrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );

    return result[0].toBigInt();
  }

  try_estimateRemainingPrizeWithBlockTime(
    secondsPerBlockFixedPoint18: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateRemainingPrizeWithBlockTime",
      "estimateRemainingPrizeWithBlockTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(secondsPerBlockFixedPoint18)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateMantissa(): BigInt {
    let result = super.call(
      "exchangeRateMantissa",
      "exchangeRateMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateMantissa",
      "exchangeRateMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeScaleMantissa(): BigInt {
    let result = super.call(
      "feeScaleMantissa",
      "feeScaleMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feeScaleMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeScaleMantissa",
      "feeScaleMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  governor(): Address {
    let result = super.call("governor", "governor():(address)", []);

    return result[0].toAddress();
  }

  try_governor(): ethereum.CallResult<Address> {
    let result = super.tryCall("governor", "governor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestRatioMantissa(user: Address): BigInt {
    let result = super.call(
      "interestRatioMantissa",
      "interestRatioMantissa(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_interestRatioMantissa(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestRatioMantissa",
      "interestRatioMantissa(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestShareTotalSupply(): BigInt {
    let result = super.call(
      "interestShareTotalSupply",
      "interestShareTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestShareTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestShareTotalSupply",
      "interestShareTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPrizePeriodOver(): boolean {
    let result = super.call(
      "isPrizePeriodOver",
      "isPrizePeriodOver():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isPrizePeriodOver(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPrizePeriodOver",
      "isPrizePeriodOver():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRngCompleted(): boolean {
    let result = super.call("isRngCompleted", "isRngCompleted():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRngCompleted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRngCompleted", "isRngCompleted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRngRequested(): boolean {
    let result = super.call("isRngRequested", "isRngRequested():(bool)", []);

    return result[0].toBoolean();
  }

  try_isRngRequested(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRngRequested", "isRngRequested():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newInterest(): BigInt {
    let result = super.call("newInterest", "newInterest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_newInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("newInterest", "newInterest():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operatorRedeemTicketsInstantly(
    from: Address,
    tickets: BigInt,
    data: Bytes,
    operatorData: Bytes
  ): BigInt {
    let result = super.call(
      "operatorRedeemTicketsInstantly",
      "operatorRedeemTicketsInstantly(address,uint256,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(operatorData)
      ]
    );

    return result[0].toBigInt();
  }

  try_operatorRedeemTicketsInstantly(
    from: Address,
    tickets: BigInt,
    data: Bytes,
    operatorData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "operatorRedeemTicketsInstantly",
      "operatorRedeemTicketsInstantly(address,uint256,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(operatorData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  operatorRedeemTicketsWithTimelock(
    from: Address,
    tickets: BigInt,
    data: Bytes,
    operatorData: Bytes
  ): BigInt {
    let result = super.call(
      "operatorRedeemTicketsWithTimelock",
      "operatorRedeemTicketsWithTimelock(address,uint256,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(operatorData)
      ]
    );

    return result[0].toBigInt();
  }

  try_operatorRedeemTicketsWithTimelock(
    from: Address,
    tickets: BigInt,
    data: Bytes,
    operatorData: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "operatorRedeemTicketsWithTimelock",
      "operatorRedeemTicketsWithTimelock(address,uint256,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(operatorData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousPrize(): BigInt {
    let result = super.call("previousPrize", "previousPrize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_previousPrize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousPrize",
      "previousPrize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousPrizeAverageTickets(): BigInt {
    let result = super.call(
      "previousPrizeAverageTickets",
      "previousPrizeAverageTickets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_previousPrizeAverageTickets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousPrizeAverageTickets",
      "previousPrizeAverageTickets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizeAverageTickets(): BigInt {
    let result = super.call(
      "prizeAverageTickets",
      "prizeAverageTickets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizeAverageTickets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizeAverageTickets",
      "prizeAverageTickets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodEndAt(): BigInt {
    let result = super.call(
      "prizePeriodEndAt",
      "prizePeriodEndAt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodEndAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodEndAt",
      "prizePeriodEndAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodRemainingSeconds(): BigInt {
    let result = super.call(
      "prizePeriodRemainingSeconds",
      "prizePeriodRemainingSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodRemainingSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodRemainingSeconds",
      "prizePeriodRemainingSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodSeconds(): BigInt {
    let result = super.call(
      "prizePeriodSeconds",
      "prizePeriodSeconds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodSeconds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodSeconds",
      "prizePeriodSeconds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizePeriodStartedAt(): BigInt {
    let result = super.call(
      "prizePeriodStartedAt",
      "prizePeriodStartedAt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_prizePeriodStartedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "prizePeriodStartedAt",
      "prizePeriodStartedAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prizeStrategy(): Address {
    let result = super.call("prizeStrategy", "prizeStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_prizeStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prizeStrategy",
      "prizeStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeemCollateral(_collateral: BigInt): BigInt {
    let result = super.call(
      "redeemCollateral",
      "redeemCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collateral)]
    );

    return result[0].toBigInt();
  }

  try_redeemCollateral(_collateral: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemCollateral",
      "redeemCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemTicketsInstantly(tickets: BigInt, data: Bytes): BigInt {
    let result = super.call(
      "redeemTicketsInstantly",
      "redeemTicketsInstantly(uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemTicketsInstantly(
    tickets: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemTicketsInstantly",
      "redeemTicketsInstantly(uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemTicketsWithTimelock(tickets: BigInt, data: Bytes): BigInt {
    let result = super.call(
      "redeemTicketsWithTimelock",
      "redeemTicketsWithTimelock(uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemTicketsWithTimelock(
    tickets: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemTicketsWithTimelock",
      "redeemTicketsWithTimelock(uint256,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tickets),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rng(): Address {
    let result = super.call("rng", "rng():(address)", []);

    return result[0].toAddress();
  }

  try_rng(): ethereum.CallResult<Address> {
    let result = super.tryCall("rng", "rng():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rngRequestId(): BigInt {
    let result = super.call("rngRequestId", "rngRequestId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rngRequestId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rngRequestId", "rngRequestId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsorship(): Address {
    let result = super.call("sponsorship", "sponsorship():(address)", []);

    return result[0].toAddress();
  }

  try_sponsorship(): ethereum.CallResult<Address> {
    let result = super.tryCall("sponsorship", "sponsorship():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sponsorshipCredit(): Address {
    let result = super.call(
      "sponsorshipCredit",
      "sponsorshipCredit():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_sponsorshipCredit(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sponsorshipCredit",
      "sponsorshipCredit():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supplyCollateral(_collateral: BigInt): BigInt {
    let result = super.call(
      "supplyCollateral",
      "supplyCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collateral)]
    );

    return result[0].toBigInt();
  }

  try_supplyCollateral(_collateral: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyCollateral",
      "supplyCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sweep(users: Array<Address>): BigInt {
    let result = super.call("sweep", "sweep(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(users)
    ]);

    return result[0].toBigInt();
  }

  try_sweep(users: Array<Address>): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sweep", "sweep(address[]):(uint256)", [
      ethereum.Value.fromAddressArray(users)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ticket(): Address {
    let result = super.call("ticket", "ticket():(address)", []);

    return result[0].toAddress();
  }

  try_ticket(): ethereum.CallResult<Address> {
    let result = super.tryCall("ticket", "ticket():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ticketCredit(): Address {
    let result = super.call("ticketCredit", "ticketCredit():(address)", []);

    return result[0].toAddress();
  }

  try_ticketCredit(): ethereum.CallResult<Address> {
    let result = super.tryCall("ticketCredit", "ticketCredit():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timelockBalanceAvailableAt(user: Address): BigInt {
    let result = super.call(
      "timelockBalanceAvailableAt",
      "timelockBalanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_timelockBalanceAvailableAt(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockBalanceAvailableAt",
      "timelockBalanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockBalanceOf(user: Address): BigInt {
    let result = super.call(
      "timelockBalanceOf",
      "timelockBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_timelockBalanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockBalanceOf",
      "timelockBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalCollateral(): BigInt {
    let result = super.call(
      "totalCollateral",
      "totalCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateral",
      "totalCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unaccountedBalance(): BigInt {
    let result = super.call(
      "unaccountedBalance",
      "unaccountedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unaccountedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unaccountedBalance",
      "unaccountedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BalanceCall extends ethereum.Call {
  get inputs(): BalanceCall__Inputs {
    return new BalanceCall__Inputs(this);
  }

  get outputs(): BalanceCall__Outputs {
    return new BalanceCall__Outputs(this);
  }
}

export class BalanceCall__Inputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }
}

export class BalanceCall__Outputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BalanceOfTicketInterestCall extends ethereum.Call {
  get inputs(): BalanceOfTicketInterestCall__Inputs {
    return new BalanceOfTicketInterestCall__Inputs(this);
  }

  get outputs(): BalanceOfTicketInterestCall__Outputs {
    return new BalanceOfTicketInterestCall__Outputs(this);
  }
}

export class BalanceOfTicketInterestCall__Inputs {
  _call: BalanceOfTicketInterestCall;

  constructor(call: BalanceOfTicketInterestCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BalanceOfTicketInterestCall__Outputs {
  _call: BalanceOfTicketInterestCall;

  constructor(call: BalanceOfTicketInterestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BeforeTokenTransferCall extends ethereum.Call {
  get inputs(): BeforeTokenTransferCall__Inputs {
    return new BeforeTokenTransferCall__Inputs(this);
  }

  get outputs(): BeforeTokenTransferCall__Outputs {
    return new BeforeTokenTransferCall__Outputs(this);
  }
}

export class BeforeTokenTransferCall__Inputs {
  _call: BeforeTokenTransferCall;

  constructor(call: BeforeTokenTransferCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BeforeTokenTransferCall__Outputs {
  _call: BeforeTokenTransferCall;

  constructor(call: BeforeTokenTransferCall) {
    this._call = call;
  }
}

export class CollateralValueOfSharesCall extends ethereum.Call {
  get inputs(): CollateralValueOfSharesCall__Inputs {
    return new CollateralValueOfSharesCall__Inputs(this);
  }

  get outputs(): CollateralValueOfSharesCall__Outputs {
    return new CollateralValueOfSharesCall__Outputs(this);
  }
}

export class CollateralValueOfSharesCall__Inputs {
  _call: CollateralValueOfSharesCall;

  constructor(call: CollateralValueOfSharesCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CollateralValueOfSharesCall__Outputs {
  _call: CollateralValueOfSharesCall;

  constructor(call: CollateralValueOfSharesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CompleteAwardCall extends ethereum.Call {
  get inputs(): CompleteAwardCall__Inputs {
    return new CompleteAwardCall__Inputs(this);
  }

  get outputs(): CompleteAwardCall__Outputs {
    return new CompleteAwardCall__Outputs(this);
  }
}

export class CompleteAwardCall__Inputs {
  _call: CompleteAwardCall;

  constructor(call: CompleteAwardCall) {
    this._call = call;
  }
}

export class CompleteAwardCall__Outputs {
  _call: CompleteAwardCall;

  constructor(call: CompleteAwardCall) {
    this._call = call;
  }
}

export class CurrentPrizeCall extends ethereum.Call {
  get inputs(): CurrentPrizeCall__Inputs {
    return new CurrentPrizeCall__Inputs(this);
  }

  get outputs(): CurrentPrizeCall__Outputs {
    return new CurrentPrizeCall__Outputs(this);
  }
}

export class CurrentPrizeCall__Inputs {
  _call: CurrentPrizeCall;

  constructor(call: CurrentPrizeCall) {
    this._call = call;
  }
}

export class CurrentPrizeCall__Outputs {
  _call: CurrentPrizeCall;

  constructor(call: CurrentPrizeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EstimatePrizeCall extends ethereum.Call {
  get inputs(): EstimatePrizeCall__Inputs {
    return new EstimatePrizeCall__Inputs(this);
  }

  get outputs(): EstimatePrizeCall__Outputs {
    return new EstimatePrizeCall__Outputs(this);
  }
}

export class EstimatePrizeCall__Inputs {
  _call: EstimatePrizeCall;

  constructor(call: EstimatePrizeCall) {
    this._call = call;
  }
}

export class EstimatePrizeCall__Outputs {
  _call: EstimatePrizeCall;

  constructor(call: EstimatePrizeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EstimatePrizeWithBlockTimeCall extends ethereum.Call {
  get inputs(): EstimatePrizeWithBlockTimeCall__Inputs {
    return new EstimatePrizeWithBlockTimeCall__Inputs(this);
  }

  get outputs(): EstimatePrizeWithBlockTimeCall__Outputs {
    return new EstimatePrizeWithBlockTimeCall__Outputs(this);
  }
}

export class EstimatePrizeWithBlockTimeCall__Inputs {
  _call: EstimatePrizeWithBlockTimeCall;

  constructor(call: EstimatePrizeWithBlockTimeCall) {
    this._call = call;
  }

  get secondsPerBlockFixedPoint18(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EstimatePrizeWithBlockTimeCall__Outputs {
  _call: EstimatePrizeWithBlockTimeCall;

  constructor(call: EstimatePrizeWithBlockTimeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExchangeRateMantissaCall extends ethereum.Call {
  get inputs(): ExchangeRateMantissaCall__Inputs {
    return new ExchangeRateMantissaCall__Inputs(this);
  }

  get outputs(): ExchangeRateMantissaCall__Outputs {
    return new ExchangeRateMantissaCall__Outputs(this);
  }
}

export class ExchangeRateMantissaCall__Inputs {
  _call: ExchangeRateMantissaCall;

  constructor(call: ExchangeRateMantissaCall) {
    this._call = call;
  }
}

export class ExchangeRateMantissaCall__Outputs {
  _call: ExchangeRateMantissaCall;

  constructor(call: ExchangeRateMantissaCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _governor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _prizeStrategy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rng(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _prizePeriodSeconds(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _cToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _governor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _prizeStrategy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rng(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _prizePeriodSeconds(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class InterestRatioMantissaCall extends ethereum.Call {
  get inputs(): InterestRatioMantissaCall__Inputs {
    return new InterestRatioMantissaCall__Inputs(this);
  }

  get outputs(): InterestRatioMantissaCall__Outputs {
    return new InterestRatioMantissaCall__Outputs(this);
  }
}

export class InterestRatioMantissaCall__Inputs {
  _call: InterestRatioMantissaCall;

  constructor(call: InterestRatioMantissaCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InterestRatioMantissaCall__Outputs {
  _call: InterestRatioMantissaCall;

  constructor(call: InterestRatioMantissaCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintTicketsCall extends ethereum.Call {
  get inputs(): MintTicketsCall__Inputs {
    return new MintTicketsCall__Inputs(this);
  }

  get outputs(): MintTicketsCall__Outputs {
    return new MintTicketsCall__Outputs(this);
  }
}

export class MintTicketsCall__Inputs {
  _call: MintTicketsCall;

  constructor(call: MintTicketsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintTicketsCall__Outputs {
  _call: MintTicketsCall;

  constructor(call: MintTicketsCall) {
    this._call = call;
  }
}

export class MintTicketsWithSponsorshipToCall extends ethereum.Call {
  get inputs(): MintTicketsWithSponsorshipToCall__Inputs {
    return new MintTicketsWithSponsorshipToCall__Inputs(this);
  }

  get outputs(): MintTicketsWithSponsorshipToCall__Outputs {
    return new MintTicketsWithSponsorshipToCall__Outputs(this);
  }
}

export class MintTicketsWithSponsorshipToCall__Inputs {
  _call: MintTicketsWithSponsorshipToCall;

  constructor(call: MintTicketsWithSponsorshipToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintTicketsWithSponsorshipToCall__Outputs {
  _call: MintTicketsWithSponsorshipToCall;

  constructor(call: MintTicketsWithSponsorshipToCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class MintedTicketsCall extends ethereum.Call {
  get inputs(): MintedTicketsCall__Inputs {
    return new MintedTicketsCall__Inputs(this);
  }

  get outputs(): MintedTicketsCall__Outputs {
    return new MintedTicketsCall__Outputs(this);
  }
}

export class MintedTicketsCall__Inputs {
  _call: MintedTicketsCall;

  constructor(call: MintedTicketsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintedTicketsCall__Outputs {
  _call: MintedTicketsCall;

  constructor(call: MintedTicketsCall) {
    this._call = call;
  }
}

export class OperatorRedeemTicketsInstantlyCall extends ethereum.Call {
  get inputs(): OperatorRedeemTicketsInstantlyCall__Inputs {
    return new OperatorRedeemTicketsInstantlyCall__Inputs(this);
  }

  get outputs(): OperatorRedeemTicketsInstantlyCall__Outputs {
    return new OperatorRedeemTicketsInstantlyCall__Outputs(this);
  }
}

export class OperatorRedeemTicketsInstantlyCall__Inputs {
  _call: OperatorRedeemTicketsInstantlyCall;

  constructor(call: OperatorRedeemTicketsInstantlyCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tickets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OperatorRedeemTicketsInstantlyCall__Outputs {
  _call: OperatorRedeemTicketsInstantlyCall;

  constructor(call: OperatorRedeemTicketsInstantlyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OperatorRedeemTicketsWithTimelockCall extends ethereum.Call {
  get inputs(): OperatorRedeemTicketsWithTimelockCall__Inputs {
    return new OperatorRedeemTicketsWithTimelockCall__Inputs(this);
  }

  get outputs(): OperatorRedeemTicketsWithTimelockCall__Outputs {
    return new OperatorRedeemTicketsWithTimelockCall__Outputs(this);
  }
}

export class OperatorRedeemTicketsWithTimelockCall__Inputs {
  _call: OperatorRedeemTicketsWithTimelockCall;

  constructor(call: OperatorRedeemTicketsWithTimelockCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tickets(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OperatorRedeemTicketsWithTimelockCall__Outputs {
  _call: OperatorRedeemTicketsWithTimelockCall;

  constructor(call: OperatorRedeemTicketsWithTimelockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCollateralCall extends ethereum.Call {
  get inputs(): RedeemCollateralCall__Inputs {
    return new RedeemCollateralCall__Inputs(this);
  }

  get outputs(): RedeemCollateralCall__Outputs {
    return new RedeemCollateralCall__Outputs(this);
  }
}

export class RedeemCollateralCall__Inputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get _collateral(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCollateralCall__Outputs {
  _call: RedeemCollateralCall;

  constructor(call: RedeemCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemTicketsInstantlyCall extends ethereum.Call {
  get inputs(): RedeemTicketsInstantlyCall__Inputs {
    return new RedeemTicketsInstantlyCall__Inputs(this);
  }

  get outputs(): RedeemTicketsInstantlyCall__Outputs {
    return new RedeemTicketsInstantlyCall__Outputs(this);
  }
}

export class RedeemTicketsInstantlyCall__Inputs {
  _call: RedeemTicketsInstantlyCall;

  constructor(call: RedeemTicketsInstantlyCall) {
    this._call = call;
  }

  get tickets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RedeemTicketsInstantlyCall__Outputs {
  _call: RedeemTicketsInstantlyCall;

  constructor(call: RedeemTicketsInstantlyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemTicketsWithTimelockCall extends ethereum.Call {
  get inputs(): RedeemTicketsWithTimelockCall__Inputs {
    return new RedeemTicketsWithTimelockCall__Inputs(this);
  }

  get outputs(): RedeemTicketsWithTimelockCall__Outputs {
    return new RedeemTicketsWithTimelockCall__Outputs(this);
  }
}

export class RedeemTicketsWithTimelockCall__Inputs {
  _call: RedeemTicketsWithTimelockCall;

  constructor(call: RedeemTicketsWithTimelockCall) {
    this._call = call;
  }

  get tickets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RedeemTicketsWithTimelockCall__Outputs {
  _call: RedeemTicketsWithTimelockCall;

  constructor(call: RedeemTicketsWithTimelockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemedTicketsCall extends ethereum.Call {
  get inputs(): RedeemedTicketsCall__Inputs {
    return new RedeemedTicketsCall__Inputs(this);
  }

  get outputs(): RedeemedTicketsCall__Outputs {
    return new RedeemedTicketsCall__Outputs(this);
  }
}

export class RedeemedTicketsCall__Inputs {
  _call: RedeemedTicketsCall;

  constructor(call: RedeemedTicketsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemedTicketsCall__Outputs {
  _call: RedeemedTicketsCall;

  constructor(call: RedeemedTicketsCall) {
    this._call = call;
  }
}

export class SetTokensCall extends ethereum.Call {
  get inputs(): SetTokensCall__Inputs {
    return new SetTokensCall__Inputs(this);
  }

  get outputs(): SetTokensCall__Outputs {
    return new SetTokensCall__Outputs(this);
  }
}

export class SetTokensCall__Inputs {
  _call: SetTokensCall;

  constructor(call: SetTokensCall) {
    this._call = call;
  }

  get _ticket(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sponsorship(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ticketCredit(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _sponsorshipCredit(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetTokensCall__Outputs {
  _call: SetTokensCall;

  constructor(call: SetTokensCall) {
    this._call = call;
  }
}

export class StartAwardCall extends ethereum.Call {
  get inputs(): StartAwardCall__Inputs {
    return new StartAwardCall__Inputs(this);
  }

  get outputs(): StartAwardCall__Outputs {
    return new StartAwardCall__Outputs(this);
  }
}

export class StartAwardCall__Inputs {
  _call: StartAwardCall;

  constructor(call: StartAwardCall) {
    this._call = call;
  }
}

export class StartAwardCall__Outputs {
  _call: StartAwardCall;

  constructor(call: StartAwardCall) {
    this._call = call;
  }
}

export class SupplyCollateralCall extends ethereum.Call {
  get inputs(): SupplyCollateralCall__Inputs {
    return new SupplyCollateralCall__Inputs(this);
  }

  get outputs(): SupplyCollateralCall__Outputs {
    return new SupplyCollateralCall__Outputs(this);
  }
}

export class SupplyCollateralCall__Inputs {
  _call: SupplyCollateralCall;

  constructor(call: SupplyCollateralCall) {
    this._call = call;
  }

  get _collateral(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SupplyCollateralCall__Outputs {
  _call: SupplyCollateralCall;

  constructor(call: SupplyCollateralCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}

export class UnaccountedBalanceCall extends ethereum.Call {
  get inputs(): UnaccountedBalanceCall__Inputs {
    return new UnaccountedBalanceCall__Inputs(this);
  }

  get outputs(): UnaccountedBalanceCall__Outputs {
    return new UnaccountedBalanceCall__Outputs(this);
  }
}

export class UnaccountedBalanceCall__Inputs {
  _call: UnaccountedBalanceCall;

  constructor(call: UnaccountedBalanceCall) {
    this._call = call;
  }
}

export class UnaccountedBalanceCall__Outputs {
  _call: UnaccountedBalanceCall;

  constructor(call: UnaccountedBalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
