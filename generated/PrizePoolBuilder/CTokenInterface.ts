// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CTokenInterface extends ethereum.SmartContract {
  static bind(address: Address): CTokenInterface {
    return new CTokenInterface("CTokenInterface", address);
  }

  balanceOf(user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(owner: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateCurrent(): BigInt {
    let result = super.call(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateCurrent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateCurrent",
      "exchangeRateCurrent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(mintAmount: BigInt): BigInt {
    let result = super.call("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(mintAmount)
    ]);

    return result[0].toBigInt();
  }

  try_mint(mintAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(mintAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(redeemAmount: BigInt): BigInt {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );

    return result[0].toBigInt();
  }

  try_redeemUnderlying(redeemAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(redeemAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supplyRatePerBlock(): BigInt {
    let result = super.call(
      "supplyRatePerBlock",
      "supplyRatePerBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_supplyRatePerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyRatePerBlock",
      "supplyRatePerBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class BalanceOfUnderlyingCall extends ethereum.Call {
  get inputs(): BalanceOfUnderlyingCall__Inputs {
    return new BalanceOfUnderlyingCall__Inputs(this);
  }

  get outputs(): BalanceOfUnderlyingCall__Outputs {
    return new BalanceOfUnderlyingCall__Outputs(this);
  }
}

export class BalanceOfUnderlyingCall__Inputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BalanceOfUnderlyingCall__Outputs {
  _call: BalanceOfUnderlyingCall;

  constructor(call: BalanceOfUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExchangeRateCurrentCall extends ethereum.Call {
  get inputs(): ExchangeRateCurrentCall__Inputs {
    return new ExchangeRateCurrentCall__Inputs(this);
  }

  get outputs(): ExchangeRateCurrentCall__Outputs {
    return new ExchangeRateCurrentCall__Outputs(this);
  }
}

export class ExchangeRateCurrentCall__Inputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }
}

export class ExchangeRateCurrentCall__Outputs {
  _call: ExchangeRateCurrentCall;

  constructor(call: ExchangeRateCurrentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SupplyRatePerBlockCall extends ethereum.Call {
  get inputs(): SupplyRatePerBlockCall__Inputs {
    return new SupplyRatePerBlockCall__Inputs(this);
  }

  get outputs(): SupplyRatePerBlockCall__Outputs {
    return new SupplyRatePerBlockCall__Outputs(this);
  }
}

export class SupplyRatePerBlockCall__Inputs {
  _call: SupplyRatePerBlockCall;

  constructor(call: SupplyRatePerBlockCall) {
    this._call = call;
  }
}

export class SupplyRatePerBlockCall__Outputs {
  _call: SupplyRatePerBlockCall;

  constructor(call: SupplyRatePerBlockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
