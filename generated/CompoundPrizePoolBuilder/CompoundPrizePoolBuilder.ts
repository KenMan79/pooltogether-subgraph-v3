// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CompoundPrizePoolCreated extends ethereum.Event {
  get params(): CompoundPrizePoolCreated__Params {
    return new CompoundPrizePoolCreated__Params(this);
  }
}

export class CompoundPrizePoolCreated__Params {
  _event: CompoundPrizePoolCreated;

  constructor(event: CompoundPrizePoolCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prizePool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get prizeStrategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SingleRandomWinnerCreated extends ethereum.Event {
  get params(): SingleRandomWinnerCreated__Params {
    return new SingleRandomWinnerCreated__Params(this);
  }
}

export class SingleRandomWinnerCreated__Params {
  _event: SingleRandomWinnerCreated;

  constructor(event: SingleRandomWinnerCreated) {
    this._event = event;
  }

  get singleRandomWinner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ticket(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sponsorship(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CompoundPrizePoolBuilder__createCompoundPrizePoolInputConfigStruct extends ethereum.Tuple {
  get cToken(): Address {
    return this[0].toAddress();
  }

  get maxExitFeeMantissa(): BigInt {
    return this[1].toBigInt();
  }

  get maxTimelockDuration(): BigInt {
    return this[2].toBigInt();
  }
}

export class CompoundPrizePoolBuilder__createSingleRandomWinnerInputPrizePoolConfigStruct extends ethereum.Tuple {
  get cToken(): Address {
    return this[0].toAddress();
  }

  get maxExitFeeMantissa(): BigInt {
    return this[1].toBigInt();
  }

  get maxTimelockDuration(): BigInt {
    return this[2].toBigInt();
  }
}

export class CompoundPrizePoolBuilder__createSingleRandomWinnerInputPrizeStrategyConfigStruct extends ethereum.Tuple {
  get proxyAdmin(): Address {
    return this[0].toAddress();
  }

  get rngService(): Address {
    return this[1].toAddress();
  }

  get prizePeriodStart(): BigInt {
    return this[2].toBigInt();
  }

  get prizePeriodSeconds(): BigInt {
    return this[3].toBigInt();
  }

  get ticketName(): string {
    return this[4].toString();
  }

  get ticketSymbol(): string {
    return this[5].toString();
  }

  get sponsorshipName(): string {
    return this[6].toString();
  }

  get sponsorshipSymbol(): string {
    return this[7].toString();
  }

  get ticketCreditLimitMantissa(): BigInt {
    return this[8].toBigInt();
  }

  get ticketCreditRateMantissa(): BigInt {
    return this[9].toBigInt();
  }

  get externalERC20Awards(): Array<Address> {
    return this[10].toAddressArray();
  }
}

export class CompoundPrizePoolBuilder extends ethereum.SmartContract {
  static bind(address: Address): CompoundPrizePoolBuilder {
    return new CompoundPrizePoolBuilder("CompoundPrizePoolBuilder", address);
  }

  compoundPrizePoolProxyFactory(): Address {
    let result = super.call(
      "compoundPrizePoolProxyFactory",
      "compoundPrizePoolProxyFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_compoundPrizePoolProxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "compoundPrizePoolProxyFactory",
      "compoundPrizePoolProxyFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  comptroller(): Address {
    let result = super.call("comptroller", "comptroller():(address)", []);

    return result[0].toAddress();
  }

  try_comptroller(): ethereum.CallResult<Address> {
    let result = super.tryCall("comptroller", "comptroller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controlledTokenProxyFactory(): Address {
    let result = super.call(
      "controlledTokenProxyFactory",
      "controlledTokenProxyFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_controlledTokenProxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "controlledTokenProxyFactory",
      "controlledTokenProxyFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createCompoundPrizePool(
    config: CompoundPrizePoolBuilder__createCompoundPrizePoolInputConfigStruct,
    prizeStrategy: Address
  ): Address {
    let result = super.call(
      "createCompoundPrizePool",
      "createCompoundPrizePool((address,uint256,uint256),address):(address)",
      [
        ethereum.Value.fromTuple(config),
        ethereum.Value.fromAddress(prizeStrategy)
      ]
    );

    return result[0].toAddress();
  }

  try_createCompoundPrizePool(
    config: CompoundPrizePoolBuilder__createCompoundPrizePoolInputConfigStruct,
    prizeStrategy: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createCompoundPrizePool",
      "createCompoundPrizePool((address,uint256,uint256),address):(address)",
      [
        ethereum.Value.fromTuple(config),
        ethereum.Value.fromAddress(prizeStrategy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createSingleRandomWinner(
    prizePoolConfig: CompoundPrizePoolBuilder__createSingleRandomWinnerInputPrizePoolConfigStruct,
    prizeStrategyConfig: CompoundPrizePoolBuilder__createSingleRandomWinnerInputPrizeStrategyConfigStruct
  ): Address {
    let result = super.call(
      "createSingleRandomWinner",
      "createSingleRandomWinner((address,uint256,uint256),(address,address,uint256,uint256,string,string,string,string,uint256,uint256,address[])):(address)",
      [
        ethereum.Value.fromTuple(prizePoolConfig),
        ethereum.Value.fromTuple(prizeStrategyConfig)
      ]
    );

    return result[0].toAddress();
  }

  try_createSingleRandomWinner(
    prizePoolConfig: CompoundPrizePoolBuilder__createSingleRandomWinnerInputPrizePoolConfigStruct,
    prizeStrategyConfig: CompoundPrizePoolBuilder__createSingleRandomWinnerInputPrizeStrategyConfigStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSingleRandomWinner",
      "createSingleRandomWinner((address,uint256,uint256),(address,address,uint256,uint256,string,string,string,string,uint256,uint256,address[])):(address)",
      [
        ethereum.Value.fromTuple(prizePoolConfig),
        ethereum.Value.fromTuple(prizeStrategyConfig)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyFactory(): Address {
    let result = super.call("proxyFactory", "proxyFactory():(address)", []);

    return result[0].toAddress();
  }

  try_proxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("proxyFactory", "proxyFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  singleRandomWinnerProxyFactory(): Address {
    let result = super.call(
      "singleRandomWinnerProxyFactory",
      "singleRandomWinnerProxyFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_singleRandomWinnerProxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "singleRandomWinnerProxyFactory",
      "singleRandomWinnerProxyFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ticketProxyFactory(): Address {
    let result = super.call(
      "ticketProxyFactory",
      "ticketProxyFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ticketProxyFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ticketProxyFactory",
      "ticketProxyFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trustedForwarder(): Address {
    let result = super.call(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedForwarder",
      "trustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _comptroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _singleRandomWinnerProxyFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _compoundPrizePoolProxyFactory(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _controlledTokenProxyFactory(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _proxyFactory(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _ticketProxyFactory(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCompoundPrizePoolCall extends ethereum.Call {
  get inputs(): CreateCompoundPrizePoolCall__Inputs {
    return new CreateCompoundPrizePoolCall__Inputs(this);
  }

  get outputs(): CreateCompoundPrizePoolCall__Outputs {
    return new CreateCompoundPrizePoolCall__Outputs(this);
  }
}

export class CreateCompoundPrizePoolCall__Inputs {
  _call: CreateCompoundPrizePoolCall;

  constructor(call: CreateCompoundPrizePoolCall) {
    this._call = call;
  }

  get config(): CreateCompoundPrizePoolCallConfigStruct {
    return this._call.inputValues[0].value.toTuple() as CreateCompoundPrizePoolCallConfigStruct;
  }

  get prizeStrategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreateCompoundPrizePoolCall__Outputs {
  _call: CreateCompoundPrizePoolCall;

  constructor(call: CreateCompoundPrizePoolCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateCompoundPrizePoolCallConfigStruct extends ethereum.Tuple {
  get cToken(): Address {
    return this[0].toAddress();
  }

  get maxExitFeeMantissa(): BigInt {
    return this[1].toBigInt();
  }

  get maxTimelockDuration(): BigInt {
    return this[2].toBigInt();
  }
}

export class CreateSingleRandomWinnerCall extends ethereum.Call {
  get inputs(): CreateSingleRandomWinnerCall__Inputs {
    return new CreateSingleRandomWinnerCall__Inputs(this);
  }

  get outputs(): CreateSingleRandomWinnerCall__Outputs {
    return new CreateSingleRandomWinnerCall__Outputs(this);
  }
}

export class CreateSingleRandomWinnerCall__Inputs {
  _call: CreateSingleRandomWinnerCall;

  constructor(call: CreateSingleRandomWinnerCall) {
    this._call = call;
  }

  get prizePoolConfig(): CreateSingleRandomWinnerCallPrizePoolConfigStruct {
    return this._call.inputValues[0].value.toTuple() as CreateSingleRandomWinnerCallPrizePoolConfigStruct;
  }

  get prizeStrategyConfig(): CreateSingleRandomWinnerCallPrizeStrategyConfigStruct {
    return this._call.inputValues[1].value.toTuple() as CreateSingleRandomWinnerCallPrizeStrategyConfigStruct;
  }
}

export class CreateSingleRandomWinnerCall__Outputs {
  _call: CreateSingleRandomWinnerCall;

  constructor(call: CreateSingleRandomWinnerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateSingleRandomWinnerCallPrizePoolConfigStruct extends ethereum.Tuple {
  get cToken(): Address {
    return this[0].toAddress();
  }

  get maxExitFeeMantissa(): BigInt {
    return this[1].toBigInt();
  }

  get maxTimelockDuration(): BigInt {
    return this[2].toBigInt();
  }
}

export class CreateSingleRandomWinnerCallPrizeStrategyConfigStruct extends ethereum.Tuple {
  get proxyAdmin(): Address {
    return this[0].toAddress();
  }

  get rngService(): Address {
    return this[1].toAddress();
  }

  get prizePeriodStart(): BigInt {
    return this[2].toBigInt();
  }

  get prizePeriodSeconds(): BigInt {
    return this[3].toBigInt();
  }

  get ticketName(): string {
    return this[4].toString();
  }

  get ticketSymbol(): string {
    return this[5].toString();
  }

  get sponsorshipName(): string {
    return this[6].toString();
  }

  get sponsorshipSymbol(): string {
    return this[7].toString();
  }

  get ticketCreditLimitMantissa(): BigInt {
    return this[8].toBigInt();
  }

  get ticketCreditRateMantissa(): BigInt {
    return this[9].toBigInt();
  }

  get externalERC20Awards(): Array<Address> {
    return this[10].toAddressArray();
  }
}
