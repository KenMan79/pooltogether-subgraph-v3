// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Awarded extends ethereum.Event {
  get params(): Awarded__Params {
    return new Awarded__Params(this);
  }
}

export class Awarded__Params {
  _event: Awarded;

  constructor(event: Awarded) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AwardedExternalERC20 extends ethereum.Event {
  get params(): AwardedExternalERC20__Params {
    return new AwardedExternalERC20__Params(this);
  }
}

export class AwardedExternalERC20__Params {
  _event: AwardedExternalERC20;

  constructor(event: AwardedExternalERC20) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AwardedExternalERC721 extends ethereum.Event {
  get params(): AwardedExternalERC721__Params {
    return new AwardedExternalERC721__Params(this);
  }
}

export class AwardedExternalERC721__Params {
  _event: AwardedExternalERC721;

  constructor(event: AwardedExternalERC721) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InstantWithdrawal extends ethereum.Event {
  get params(): InstantWithdrawal__Params {
    return new InstantWithdrawal__Params(this);
  }
}

export class InstantWithdrawal__Params {
  _event: InstantWithdrawal;

  constructor(event: InstantWithdrawal) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get exitFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sponsoredExitFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PrizeStrategyDetached extends ethereum.Event {
  get params(): PrizeStrategyDetached__Params {
    return new PrizeStrategyDetached__Params(this);
  }
}

export class PrizeStrategyDetached__Params {
  _event: PrizeStrategyDetached;

  constructor(event: PrizeStrategyDetached) {
    this._event = event;
  }
}

export class TimelockDeposited extends ethereum.Event {
  get params(): TimelockDeposited__Params {
    return new TimelockDeposited__Params(this);
  }
}

export class TimelockDeposited__Params {
  _event: TimelockDeposited;

  constructor(event: TimelockDeposited) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TimelockedWithdrawal extends ethereum.Event {
  get params(): TimelockedWithdrawal__Params {
    return new TimelockedWithdrawal__Params(this);
  }
}

export class TimelockedWithdrawal__Params {
  _event: TimelockedWithdrawal;

  constructor(event: TimelockedWithdrawal) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TimelockedWithdrawalSwept extends ethereum.Event {
  get params(): TimelockedWithdrawalSwept__Params {
    return new TimelockedWithdrawalSwept__Params(this);
  }
}

export class TimelockedWithdrawalSwept__Params {
  _event: TimelockedWithdrawalSwept;

  constructor(event: TimelockedWithdrawalSwept) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PrizePool extends ethereum.SmartContract {
  static bind(address: Address): PrizePool {
    return new PrizePool("PrizePool", address);
  }

  accountedBalance(): BigInt {
    let result = super.call(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accountedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountedBalance",
      "accountedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  awardBalance(): BigInt {
    let result = super.call("awardBalance", "awardBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_awardBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("awardBalance", "awardBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canAwardExternal(_externalToken: Address): boolean {
    let result = super.call(
      "canAwardExternal",
      "canAwardExternal(address):(bool)",
      [ethereum.Value.fromAddress(_externalToken)]
    );

    return result[0].toBoolean();
  }

  try_canAwardExternal(_externalToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canAwardExternal",
      "canAwardExternal(address):(bool)",
      [ethereum.Value.fromAddress(_externalToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  estimateAccruedInterestOverBlocks(principal: BigInt, blocks: BigInt): BigInt {
    let result = super.call(
      "estimateAccruedInterestOverBlocks",
      "estimateAccruedInterestOverBlocks(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principal),
        ethereum.Value.fromUnsignedBigInt(blocks)
      ]
    );

    return result[0].toBigInt();
  }

  try_estimateAccruedInterestOverBlocks(
    principal: BigInt,
    blocks: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateAccruedInterestOverBlocks",
      "estimateAccruedInterestOverBlocks(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principal),
        ethereum.Value.fromUnsignedBigInt(blocks)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxExitFeeMantissa(): BigInt {
    let result = super.call(
      "maxExitFeeMantissa",
      "maxExitFeeMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxExitFeeMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxExitFeeMantissa",
      "maxExitFeeMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxTimelockDuration(): BigInt {
    let result = super.call(
      "maxTimelockDuration",
      "maxTimelockDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTimelockDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTimelockDuration",
      "maxTimelockDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prizeStrategy(): Address {
    let result = super.call("prizeStrategy", "prizeStrategy():(address)", []);

    return result[0].toAddress();
  }

  try_prizeStrategy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "prizeStrategy",
      "prizeStrategy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sweepTimelockBalances(users: Array<Address>): BigInt {
    let result = super.call(
      "sweepTimelockBalances",
      "sweepTimelockBalances(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(users)]
    );

    return result[0].toBigInt();
  }

  try_sweepTimelockBalances(
    users: Array<Address>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sweepTimelockBalances",
      "sweepTimelockBalances(address[]):(uint256)",
      [ethereum.Value.fromAddressArray(users)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockBalanceAvailableAt(user: Address): BigInt {
    let result = super.call(
      "timelockBalanceAvailableAt",
      "timelockBalanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_timelockBalanceAvailableAt(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockBalanceAvailableAt",
      "timelockBalanceAvailableAt(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockBalanceOf(user: Address): BigInt {
    let result = super.call(
      "timelockBalanceOf",
      "timelockBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_timelockBalanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockBalanceOf",
      "timelockBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timelockTotalSupply(): BigInt {
    let result = super.call(
      "timelockTotalSupply",
      "timelockTotalSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timelockTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockTotalSupply",
      "timelockTotalSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokens(): Array<Address> {
    let result = super.call("tokens", "tokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_tokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("tokens", "tokens():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdrawInstantlyFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address,
    sponsorAmount: BigInt,
    maximumExitFee: BigInt,
    data: Bytes
  ): BigInt {
    let result = super.call(
      "withdrawInstantlyFrom",
      "withdrawInstantlyFrom(address,uint256,address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(sponsorAmount),
        ethereum.Value.fromUnsignedBigInt(maximumExitFee),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawInstantlyFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address,
    sponsorAmount: BigInt,
    maximumExitFee: BigInt,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawInstantlyFrom",
      "withdrawInstantlyFrom(address,uint256,address,uint256,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromUnsignedBigInt(sponsorAmount),
        ethereum.Value.fromUnsignedBigInt(maximumExitFee),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawWithTimelockFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address,
    data: Bytes
  ): BigInt {
    let result = super.call(
      "withdrawWithTimelockFrom",
      "withdrawWithTimelockFrom(address,uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawWithTimelockFrom(
    from: Address,
    amount: BigInt,
    controlledToken: Address,
    data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawWithTimelockFrom",
      "withdrawWithTimelockFrom(address,uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(controlledToken),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddControlledTokenCall extends ethereum.Call {
  get inputs(): AddControlledTokenCall__Inputs {
    return new AddControlledTokenCall__Inputs(this);
  }

  get outputs(): AddControlledTokenCall__Outputs {
    return new AddControlledTokenCall__Outputs(this);
  }
}

export class AddControlledTokenCall__Inputs {
  _call: AddControlledTokenCall;

  constructor(call: AddControlledTokenCall) {
    this._call = call;
  }

  get _controlledToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddControlledTokenCall__Outputs {
  _call: AddControlledTokenCall;

  constructor(call: AddControlledTokenCall) {
    this._call = call;
  }
}

export class AwardCall extends ethereum.Call {
  get inputs(): AwardCall__Inputs {
    return new AwardCall__Inputs(this);
  }

  get outputs(): AwardCall__Outputs {
    return new AwardCall__Outputs(this);
  }
}

export class AwardCall__Inputs {
  _call: AwardCall;

  constructor(call: AwardCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AwardCall__Outputs {
  _call: AwardCall;

  constructor(call: AwardCall) {
    this._call = call;
  }
}

export class AwardBalanceCall extends ethereum.Call {
  get inputs(): AwardBalanceCall__Inputs {
    return new AwardBalanceCall__Inputs(this);
  }

  get outputs(): AwardBalanceCall__Outputs {
    return new AwardBalanceCall__Outputs(this);
  }
}

export class AwardBalanceCall__Inputs {
  _call: AwardBalanceCall;

  constructor(call: AwardBalanceCall) {
    this._call = call;
  }
}

export class AwardBalanceCall__Outputs {
  _call: AwardBalanceCall;

  constructor(call: AwardBalanceCall) {
    this._call = call;
  }

  get award(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AwardExternalERC20Call extends ethereum.Call {
  get inputs(): AwardExternalERC20Call__Inputs {
    return new AwardExternalERC20Call__Inputs(this);
  }

  get outputs(): AwardExternalERC20Call__Outputs {
    return new AwardExternalERC20Call__Outputs(this);
  }
}

export class AwardExternalERC20Call__Inputs {
  _call: AwardExternalERC20Call;

  constructor(call: AwardExternalERC20Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get externalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AwardExternalERC20Call__Outputs {
  _call: AwardExternalERC20Call;

  constructor(call: AwardExternalERC20Call) {
    this._call = call;
  }
}

export class AwardExternalERC721Call extends ethereum.Call {
  get inputs(): AwardExternalERC721Call__Inputs {
    return new AwardExternalERC721Call__Inputs(this);
  }

  get outputs(): AwardExternalERC721Call__Outputs {
    return new AwardExternalERC721Call__Outputs(this);
  }
}

export class AwardExternalERC721Call__Inputs {
  _call: AwardExternalERC721Call;

  constructor(call: AwardExternalERC721Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get externalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class AwardExternalERC721Call__Outputs {
  _call: AwardExternalERC721Call;

  constructor(call: AwardExternalERC721Call) {
    this._call = call;
  }
}

export class BalanceCall extends ethereum.Call {
  get inputs(): BalanceCall__Inputs {
    return new BalanceCall__Inputs(this);
  }

  get outputs(): BalanceCall__Outputs {
    return new BalanceCall__Outputs(this);
  }
}

export class BalanceCall__Inputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }
}

export class BalanceCall__Outputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BeforeTokenTransferCall extends ethereum.Call {
  get inputs(): BeforeTokenTransferCall__Inputs {
    return new BeforeTokenTransferCall__Inputs(this);
  }

  get outputs(): BeforeTokenTransferCall__Outputs {
    return new BeforeTokenTransferCall__Outputs(this);
  }
}

export class BeforeTokenTransferCall__Inputs {
  _call: BeforeTokenTransferCall;

  constructor(call: BeforeTokenTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BeforeTokenTransferCall__Outputs {
  _call: BeforeTokenTransferCall;

  constructor(call: BeforeTokenTransferCall) {
    this._call = call;
  }
}

export class DepositToCall extends ethereum.Call {
  get inputs(): DepositToCall__Inputs {
    return new DepositToCall__Inputs(this);
  }

  get outputs(): DepositToCall__Outputs {
    return new DepositToCall__Outputs(this);
  }
}

export class DepositToCall__Inputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class DepositToCall__Outputs {
  _call: DepositToCall;

  constructor(call: DepositToCall) {
    this._call = call;
  }
}

export class DetachPrizeStrategyCall extends ethereum.Call {
  get inputs(): DetachPrizeStrategyCall__Inputs {
    return new DetachPrizeStrategyCall__Inputs(this);
  }

  get outputs(): DetachPrizeStrategyCall__Outputs {
    return new DetachPrizeStrategyCall__Outputs(this);
  }
}

export class DetachPrizeStrategyCall__Inputs {
  _call: DetachPrizeStrategyCall;

  constructor(call: DetachPrizeStrategyCall) {
    this._call = call;
  }
}

export class DetachPrizeStrategyCall__Outputs {
  _call: DetachPrizeStrategyCall;

  constructor(call: DetachPrizeStrategyCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _prizeStrategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _controlledTokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _maxExitFeeMantissa(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxTimelockDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SweepTimelockBalancesCall extends ethereum.Call {
  get inputs(): SweepTimelockBalancesCall__Inputs {
    return new SweepTimelockBalancesCall__Inputs(this);
  }

  get outputs(): SweepTimelockBalancesCall__Outputs {
    return new SweepTimelockBalancesCall__Outputs(this);
  }
}

export class SweepTimelockBalancesCall__Inputs {
  _call: SweepTimelockBalancesCall;

  constructor(call: SweepTimelockBalancesCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SweepTimelockBalancesCall__Outputs {
  _call: SweepTimelockBalancesCall;

  constructor(call: SweepTimelockBalancesCall) {
    this._call = call;
  }

  get totalWithdrawal(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TimelockDepositToCall extends ethereum.Call {
  get inputs(): TimelockDepositToCall__Inputs {
    return new TimelockDepositToCall__Inputs(this);
  }

  get outputs(): TimelockDepositToCall__Outputs {
    return new TimelockDepositToCall__Outputs(this);
  }
}

export class TimelockDepositToCall__Inputs {
  _call: TimelockDepositToCall;

  constructor(call: TimelockDepositToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class TimelockDepositToCall__Outputs {
  _call: TimelockDepositToCall;

  constructor(call: TimelockDepositToCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawInstantlyFromCall extends ethereum.Call {
  get inputs(): WithdrawInstantlyFromCall__Inputs {
    return new WithdrawInstantlyFromCall__Inputs(this);
  }

  get outputs(): WithdrawInstantlyFromCall__Outputs {
    return new WithdrawInstantlyFromCall__Outputs(this);
  }
}

export class WithdrawInstantlyFromCall__Inputs {
  _call: WithdrawInstantlyFromCall;

  constructor(call: WithdrawInstantlyFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get sponsorAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get maximumExitFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class WithdrawInstantlyFromCall__Outputs {
  _call: WithdrawInstantlyFromCall;

  constructor(call: WithdrawInstantlyFromCall) {
    this._call = call;
  }

  get exitFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawWithTimelockFromCall extends ethereum.Call {
  get inputs(): WithdrawWithTimelockFromCall__Inputs {
    return new WithdrawWithTimelockFromCall__Inputs(this);
  }

  get outputs(): WithdrawWithTimelockFromCall__Outputs {
    return new WithdrawWithTimelockFromCall__Outputs(this);
  }
}

export class WithdrawWithTimelockFromCall__Inputs {
  _call: WithdrawWithTimelockFromCall;

  constructor(call: WithdrawWithTimelockFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get controlledToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class WithdrawWithTimelockFromCall__Outputs {
  _call: WithdrawWithTimelockFromCall;

  constructor(call: WithdrawWithTimelockFromCall) {
    this._call = call;
  }

  get unlockTimestamp(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
