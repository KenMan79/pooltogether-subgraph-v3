// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PrizePoolBuilder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PrizePoolBuilder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrizePoolBuilder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrizePoolBuilder", id.toString(), this);
  }

  static load(id: string): PrizePoolBuilder | null {
    return store.get("PrizePoolBuilder", id) as PrizePoolBuilder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trustedForwarder(): Bytes {
    let value = this.get("trustedForwarder");
    return value.toBytes();
  }

  set trustedForwarder(value: Bytes) {
    this.set("trustedForwarder", Value.fromBytes(value));
  }

  get prizePoolModuleManagerFactory(): Bytes {
    let value = this.get("prizePoolModuleManagerFactory");
    return value.toBytes();
  }

  set prizePoolModuleManagerFactory(value: Bytes) {
    this.set("prizePoolModuleManagerFactory", Value.fromBytes(value));
  }

  get compoundYieldServiceFactory(): Bytes {
    let value = this.get("compoundYieldServiceFactory");
    return value.toBytes();
  }

  set compoundYieldServiceFactory(value: Bytes) {
    this.set("compoundYieldServiceFactory", Value.fromBytes(value));
  }

  get periodicPrizePoolFactory(): Bytes {
    let value = this.get("periodicPrizePoolFactory");
    return value.toBytes();
  }

  set periodicPrizePoolFactory(value: Bytes) {
    this.set("periodicPrizePoolFactory", Value.fromBytes(value));
  }

  get ticketFactory(): Bytes {
    let value = this.get("ticketFactory");
    return value.toBytes();
  }

  set ticketFactory(value: Bytes) {
    this.set("ticketFactory", Value.fromBytes(value));
  }

  get timelockFactory(): Bytes {
    let value = this.get("timelockFactory");
    return value.toBytes();
  }

  set timelockFactory(value: Bytes) {
    this.set("timelockFactory", Value.fromBytes(value));
  }

  get sponsorshipFactory(): Bytes {
    let value = this.get("sponsorshipFactory");
    return value.toBytes();
  }

  set sponsorshipFactory(value: Bytes) {
    this.set("sponsorshipFactory", Value.fromBytes(value));
  }

  get interestTrackerFactory(): Bytes {
    let value = this.get("interestTrackerFactory");
    return value.toBytes();
  }

  set interestTrackerFactory(value: Bytes) {
    this.set("interestTrackerFactory", Value.fromBytes(value));
  }

  get creditFactory(): Bytes {
    let value = this.get("creditFactory");
    return value.toBytes();
  }

  set creditFactory(value: Bytes) {
    this.set("creditFactory", Value.fromBytes(value));
  }

  get governor(): Bytes {
    let value = this.get("governor");
    return value.toBytes();
  }

  set governor(value: Bytes) {
    this.set("governor", Value.fromBytes(value));
  }

  get rng(): Bytes {
    let value = this.get("rng");
    return value.toBytes();
  }

  set rng(value: Bytes) {
    this.set("rng", Value.fromBytes(value));
  }
}

export class SingleRandomWinnerPrizePoolBuilder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SingleRandomWinnerPrizePoolBuilder entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SingleRandomWinnerPrizePoolBuilder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SingleRandomWinnerPrizePoolBuilder", id.toString(), this);
  }

  static load(id: string): SingleRandomWinnerPrizePoolBuilder | null {
    return store.get(
      "SingleRandomWinnerPrizePoolBuilder",
      id
    ) as SingleRandomWinnerPrizePoolBuilder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePoolBuilder(): string {
    let value = this.get("prizePoolBuilder");
    return value.toString();
  }

  set prizePoolBuilder(value: string) {
    this.set("prizePoolBuilder", Value.fromString(value));
  }

  get prizeStrategyFactory(): Bytes {
    let value = this.get("prizeStrategyFactory");
    return value.toBytes();
  }

  set prizeStrategyFactory(value: Bytes) {
    this.set("prizeStrategyFactory", Value.fromBytes(value));
  }
}

export class PoolManager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolManager entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolManager entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolManager", id.toString(), this);
  }

  static load(id: string): PoolManager | null {
    return store.get("PoolManager", id) as PoolManager | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get prizeStrategy(): Bytes {
    let value = this.get("prizeStrategy");
    return value.toBytes();
  }

  set prizeStrategy(value: Bytes) {
    this.set("prizeStrategy", Value.fromBytes(value));
  }

  get yieldService(): Bytes {
    let value = this.get("yieldService");
    return value.toBytes();
  }

  set yieldService(value: Bytes) {
    this.set("yieldService", Value.fromBytes(value));
  }

  get ticket(): Bytes {
    let value = this.get("ticket");
    return value.toBytes();
  }

  set ticket(value: Bytes) {
    this.set("ticket", Value.fromBytes(value));
  }

  get credit(): Bytes {
    let value = this.get("credit");
    return value.toBytes();
  }

  set credit(value: Bytes) {
    this.set("credit", Value.fromBytes(value));
  }

  get sponsorship(): Bytes {
    let value = this.get("sponsorship");
    return value.toBytes();
  }

  set sponsorship(value: Bytes) {
    this.set("sponsorship", Value.fromBytes(value));
  }

  get timelock(): Bytes {
    let value = this.get("timelock");
    return value.toBytes();
  }

  set timelock(value: Bytes) {
    this.set("timelock", Value.fromBytes(value));
  }

  get prizePool(): Bytes {
    let value = this.get("prizePool");
    return value.toBytes();
  }

  set prizePool(value: Bytes) {
    this.set("prizePool", Value.fromBytes(value));
  }

  get interestTracker(): Bytes {
    let value = this.get("interestTracker");
    return value.toBytes();
  }

  set interestTracker(value: Bytes) {
    this.set("interestTracker", Value.fromBytes(value));
  }
}

export class PeriodicPrizePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PeriodicPrizePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PeriodicPrizePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PeriodicPrizePool", id.toString(), this);
  }

  static load(id: string): PeriodicPrizePool | null {
    return store.get("PeriodicPrizePool", id) as PeriodicPrizePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizeStrategy(): Bytes {
    let value = this.get("prizeStrategy");
    return value.toBytes();
  }

  set prizeStrategy(value: Bytes) {
    this.set("prizeStrategy", Value.fromBytes(value));
  }

  get rng(): Bytes {
    let value = this.get("rng");
    return value.toBytes();
  }

  set rng(value: Bytes) {
    this.set("rng", Value.fromBytes(value));
  }

  get periodicPrizePool(): Bytes {
    let value = this.get("periodicPrizePool");
    return value.toBytes();
  }

  set periodicPrizePool(value: Bytes) {
    this.set("periodicPrizePool", Value.fromBytes(value));
  }

  get prizePeriodSeconds(): BigInt {
    let value = this.get("prizePeriodSeconds");
    return value.toBigInt();
  }

  set prizePeriodSeconds(value: BigInt) {
    this.set("prizePeriodSeconds", Value.fromBigInt(value));
  }

  get prizePeriodStartedAt(): BigInt {
    let value = this.get("prizePeriodStartedAt");
    return value.toBigInt();
  }

  set prizePeriodStartedAt(value: BigInt) {
    this.set("prizePeriodStartedAt", Value.fromBigInt(value));
  }

  get previousPrize(): BigInt {
    let value = this.get("previousPrize");
    return value.toBigInt();
  }

  set previousPrize(value: BigInt) {
    this.set("previousPrize", Value.fromBigInt(value));
  }

  get previousPrizeAverageTickets(): BigInt {
    let value = this.get("previousPrizeAverageTickets");
    return value.toBigInt();
  }

  set previousPrizeAverageTickets(value: BigInt) {
    this.set("previousPrizeAverageTickets", Value.fromBigInt(value));
  }

  get feeScaleMantissa(): BigInt {
    let value = this.get("feeScaleMantissa");
    return value.toBigInt();
  }

  set feeScaleMantissa(value: BigInt) {
    this.set("feeScaleMantissa", Value.fromBigInt(value));
  }

  get rngRequestId(): BigInt {
    let value = this.get("rngRequestId");
    return value.toBigInt();
  }

  set rngRequestId(value: BigInt) {
    this.set("rngRequestId", Value.fromBigInt(value));
  }
}

export class PrizeStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PrizeStrategy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrizeStrategy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrizeStrategy", id.toString(), this);
  }

  static load(id: string): PrizeStrategy | null {
    return store.get("PrizeStrategy", id) as PrizeStrategy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class YieldService extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save YieldService entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save YieldService entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("YieldService", id.toString(), this);
  }

  static load(id: string): YieldService | null {
    return store.get("YieldService", id) as YieldService | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Ticket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ticket entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ticket entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ticket", id.toString(), this);
  }

  static load(id: string): Ticket | null {
    return store.get("Ticket", id) as Ticket | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Credit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Credit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Credit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Credit", id.toString(), this);
  }

  static load(id: string): Credit | null {
    return store.get("Credit", id) as Credit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Sponsorship extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Sponsorship entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Sponsorship entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Sponsorship", id.toString(), this);
  }

  static load(id: string): Sponsorship | null {
    return store.get("Sponsorship", id) as Sponsorship | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Timelock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Timelock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Timelock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Timelock", id.toString(), this);
  }

  static load(id: string): Timelock | null {
    return store.get("Timelock", id) as Timelock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class InterestTracker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InterestTracker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InterestTracker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InterestTracker", id.toString(), this);
  }

  static load(id: string): InterestTracker | null {
    return store.get("InterestTracker", id) as InterestTracker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}
