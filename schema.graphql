enum PrizePoolState {
  Opened
  Started
  Awarded
}

enum YieldServiceTokenType {
  cToken
}

type CreditRate @entity {
  id: ID!
  prizePool: PrizePool!

  creditLimitMantissa: BigInt!
  creditRateMantissa: BigInt!
}

type CreditBalance @entity {
  id: ID!
  prizePool: PrizePool!

  balance: BigInt
  timestamp: BigInt
  initialized: Boolean
}

type CompoundPrizePoolBuilder @entity {
  id: ID!

  comptroller: Comptroller!
  trustedForwarder: Bytes!
}

type Comptroller @entity {
  id: ID!
  owner: Bytes!
  reserveRateMantissa: BigInt!

  players: [DripTokenPlayer!]! @derivedFrom(field: "comptroller")
  prizePools: [PrizePool!]! @derivedFrom(field: "comptroller")
}

type PrizePool @entity {
  id: ID!

  owner: Bytes!
  comptroller: Comptroller!
  prizeStrategy: Bytes!
  trustedForwarder: Bytes
  deactivated: Boolean!

  reserveFeeControlledToken: Bytes!

  underlyingCollateralToken: Bytes!
  underlyingCollateralDecimals: BigInt!
  underlyingCollateralName: String!
  underlyingCollateralSymbol: String!

  maxExitFeeMantissa: BigInt
  maxTimelockDuration: BigInt!
  timelockTotalSupply: BigInt!
  liquidityCap: BigInt!

  playerCount: BigInt!
  totalSupply: BigInt! # move to Ticket entity?
  totalSponsorship: BigInt! # move to Sponsorship entity?

  cumulativePrizeGross: BigInt!
  cumulativePrizeReserveFee: BigInt!
  cumulativePrizeNet: BigInt!

  currentPrizeId: BigInt!
  currentState: PrizePoolState!

  prizesCount: BigInt!
  prizes: [Prize!]! @derivedFrom(field: "prizePool")

  tokenCreditRates: [CreditRate!]! @derivedFrom(field: "prizePool")
  tokenCreditBalances: [CreditBalance!]! @derivedFrom(field: "prizePool")

  players: [Player!]! @derivedFrom(field: "prizePool")
  sponsors: [Sponsor!]! @derivedFrom(field: "prizePool")

  balanceDrips: [BalanceDrip!]! @derivedFrom(field: "prizePool")
  volumeDrips: [VolumeDrip!]! @derivedFrom(field: "prizePool")
}

# ID: `${prizePool.address}-${prizeId}`
# dynamically generated type, not mapped to a specific contract
type Prize @entity {
  id: ID!

  awardStartOperator: Bytes
  awardedOperator: Bytes

  prizePool: PrizePool!

  prizePeriodStartedTimestamp: BigInt
  lockBlock: BigInt

  awardedBlock: BigInt
  awardedTimestamp: BigInt

  rngRequestId: BigInt
  randomNumber: BigInt

  amount: BigInt

  totalTicketSupply: BigInt # cache of num tickets sold when this prize was awarded

  winners: [Bytes!]
}

type SingleRandomWinner @entity {
  id: ID!

  owner: Bytes!
  compoundPrizePoolBuilder: CompoundPrizePoolBuilder!

  prizePool: PrizePool!
  ticket: Bytes!
  rng: Bytes!
  sponsorship: Bytes!

  prizePeriodSeconds: BigInt!
  prizePeriodStartedAt: BigInt!
  prizePeriodEndAt: BigInt!

  externalErc20Awards: [ExternalErc20Award!]! @derivedFrom(field: "prizeStrategy")
  externalErc721Awards: [ExternalErc721Award!]! @derivedFrom(field: "prizeStrategy")
}

type Ticket @entity {
  id: ID!

  prizeStrategy: Bytes!

  name: String!
  symbol: String!
  decimals: BigInt!
}

type Sponsorship @entity {
  id: ID!

  prizeStrategy: Bytes!

  name: String!
  symbol: String!
  decimals: BigInt!
}

type ExternalErc20Award @entity {
  id: ID!
  prizeStrategy: SingleRandomWinner!

  address: Bytes!
}

type ExternalErc721Award @entity {
  id: ID!
  prizeStrategy: SingleRandomWinner!

  address: Bytes!
  tokenIds: [BigInt!]
}

type Player @entity {
  id: ID!
  prizePool: PrizePool!
  address: Bytes!

  balance: BigInt!
  timelockedBalance: BigInt!
  unlockTimestamp: BigInt!
  cumulativeWinnings: BigInt!
}

type DripTokenPlayer @entity {
  id: ID!
  comptroller: Comptroller!
  dripToken: Bytes!
  address: Bytes!

  # claimable balance
  balance: BigInt!
}

type BalanceDripPlayer @entity {
  id: ID!
  balanceDrip: BalanceDrip!
  address: Bytes!
}

type BalanceDrip @entity {
  id: ID!
  prizePool: PrizePool!
  measureToken: Bytes!
  dripToken: Bytes!

  dripRatePerSecond: BigInt
  exchangeRateMantissa: BigInt
  timestamp: BigInt

  players: [BalanceDripPlayer!]! @derivedFrom(field: "balanceDrip")

  deactivated: Boolean!
}


type VolumeDripPlayer @entity {
  id: ID!
  volumeDrip: VolumeDrip!
  address: Bytes!

  periodIndex: BigInt!
  balance: BigInt!
}

type VolumeDripPeriod @entity {
  id: ID!
  volumeDrip: VolumeDrip!
  periodIndex: BigInt!

  totalSupply: BigInt
  dripAmount: BigInt
  endTime: BigInt

  isDripping: Boolean!
}

type VolumeDrip @entity {
  id: ID!
  prizePool: PrizePool!
  measureToken: Bytes!
  dripToken: Bytes!
  referral: Boolean!

  periodSeconds: BigInt
  dripAmount: BigInt
  periodCount: BigInt

  deposits: [VolumeDripPlayer!]! @derivedFrom(field: "volumeDrip")
  periods: [VolumeDripPeriod!]! @derivedFrom(field: "volumeDrip")

  deactivated: Boolean!
}

type Sponsor @entity {
  id: ID!

  address: Bytes!
  balance: BigInt!

  prizePool: PrizePool!
}
