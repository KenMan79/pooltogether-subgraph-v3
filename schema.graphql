enum PrizePoolState {
  Opened
  Started
  Awarded
}

enum YieldServiceTokenType {
  cToken
}


type PrizeStrategy @entity {
  id: ID!

  creator: Bytes!
  compoundPrizePoolBuilder: CompoundPrizePoolBuilder!
  
  prizePool: PrizePool!
  ticket: Bytes!
  rng: Bytes!
  sponsorship: Bytes!
  # trustedForwarder: Bytes!
  governor: Bytes!

  currentPrizeId: BigInt!
  currentState: PrizePoolState!

  prizePeriodSeconds: BigInt!
  
  exitFeeMantissa: BigInt!
  creditRateMantissa: BigInt!

  prizesCount: BitInt!
  prizes: [Prize!]! @derivedFrom(field: "prizeStrategy")
}

type PrizePool @entity {
  id: ID!

  # trustedForwarder: Bytes!
  prizeStrategy: PrizeStrategy!

  # yieldToken: Bytes!
  # yieldDecimals: BigInt!
  # yieldName: String!
  # yieldSymbol: String!
  
  underlyingCollateralToken: Bytes!
  underlyingCollateralDecimals: BigInt!
  underlyingCollateralName: String!
  underlyingCollateralSymbol: String!

  maxExitFeeMantissa: BigInt
  maxTimelockDuration: BigInt!
  timelockTotalSupply: BigInt!

  playerCount: BigInt!
  totalSupply: BigInt! # move to PrizePool.Ticket relationship

  # previousPrize: BigInt

  # sponsorships: [Sponsor!]! @derivedFrom(field: "prizePool")
  players: [Player!]! @derivedFrom(field: "prizePool")
}

# ID: `${prizePool.address}-${msg.sender.address}`
# dynamically generated type, not mapped to a specific contract
type Player @entity {
  id: ID!
  
  balance: BigInt!

  timelockedBalance: BigInt!
  unlockTimestamp: BigInt!

  address: Bytes!
  prizePool: PrizePool!
}

type CompoundPrizePoolBuilder @entity {
  id: ID!

  trustedForwarder: Bytes!
  governor: Bytes!
  rng: Bytes!

  # controlledTokenFactory: Bytes!
  # compoundPeriodicPrizePoolFactory: Bytes!
  # ticketFactory: Bytes!
}

type Ticket @entity {
  id: ID!
  
  prizeStrategy: PrizeStrategy!
  
  name: String!
  symbol: String!
  decimals: BigInt!
}

type Sponsorship @entity {
  id: ID!

  prizeStrategy: PrizeStrategy!

  name: String!
  symbol: String!
  decimals: BigInt!
}

# type Token @entity {
#   id: ID!

#   name: String!
#   symbol: String!

#   decimals: BigInt!
# }

# type YieldService @entity {
#   id: ID!

#   prizePool: PrizePool!

#   # token: Token!
#   # yieldServiceToken: YieldServiceToken!

#   # accountedBalance: BigInt!
#   # balance: BigInt!
#   # unaccountedBalance: BigInt!

#   # supplyRatePerBlock: BigInt
# }

# type YieldServiceToken @entity {
#   id: ID!

#   token: Token!
#   type: YieldServiceTokenType!

#   prizePool: PrizePool!
# }


# ID: `${prizePool.address}-${prizeId}`
# dynamically generated type, not mapped to a specific contract
type Prize @entity {
  id: ID!

  awardStartOperator: Bytes
  awardedOperator: Bytes

  prizeStrategy: PrizeStrategy!

  prizePeriodStartedTimestamp: BigInt!
  lockBlock: BigInt
  
  awardedBlock: BigInt
  awardedTimestamp: BigInt

  rngRequestId: BigInt!
  randomNumber: BigInt

  gross: BigInt
  net: BigInt
  reserveFee: BigInt

  winners: [Player!]
}

# type Sponsor @entity {
#   id: ID! 
#   address: Bytes!
#   poolContract: PoolContract!
#   sponsorshipAndFeeBalance: BigInt!
# }
