enum PrizePoolState {
  Opened
  Started
  Awarded
}

enum PrizePoolType {
  Compound
}


type Comptroller @entity {
  id: ID!
  reserveRateMantissa: BigInt!

  # players: [DripTokenPlayer!]! @derivedFrom(field: "comptroller")
  # prizePools: [PrizePool!]! @derivedFrom(field: "comptroller")
}

type PrizeStrategy @entity {
  id: ID!

  creator: Bytes!
  compoundPrizePoolBuilder: CompoundPrizePoolBuilder!

  prizePool: PrizePool!
  comptroller: Comptroller!
  ticket: Bytes!
  rng: Bytes!
  sponsorship: Bytes!
  # trustedForwarder: Bytes!

  currentPrizeId: BigInt!
  currentState: PrizePoolState!

  prizePeriodSeconds: BigInt!
  prizePeriodStartedAt: BigInt!

  exitFeeMantissa: BigInt!
  creditRateMantissa: BigInt!

  prizesCount: BigInt!
  prizes: [Prize!]! @derivedFrom(field: "prizeStrategy")
}

type PrizePool @entity {
  id: ID!

  comptroller: Comptroller!
  prizeStrategy: PrizeStrategy!

  # yieldToken: Bytes!
  # yieldDecimals: BigInt!
  # yieldName: String!
  # yieldSymbol: String!

  underlyingCollateralToken: Bytes!
  underlyingCollateralDecimals: BigInt!
  underlyingCollateralName: String!
  underlyingCollateralSymbol: String!

  maxExitFeeMantissa: BigInt
  maxTimelockDuration: BigInt!
  timelockTotalSupply: BigInt!

  playerCount: BigInt!
  totalSupply: BigInt! # move to PrizePool.Ticket relationship?

  cumulativePrizeGross: BigInt!
  cumulativePrizeReserveFee: BigInt!
  cumulativePrizeNet: BigInt!

  # sponsorships: [Sponsor!]! @derivedFrom(field: "prizePool")
  players: [Player!]! @derivedFrom(field: "prizePool")

  balanceDrips: [BalanceDrip!]! @derivedFrom(field: "prizePool")
  # volumeDrips: [VolumeDrip!]! @derivedFrom(field: "prizePool")
  # referralVolumeDrips: [VolumeDrip!]! @derivedFrom(field: "prizePool")
}

# ID: `${prizePool.address}-${prizeId}`
# dynamically generated type, not mapped to a specific contract
type Prize @entity {
  id: ID!

  awardStartOperator: Bytes
  awardedOperator: Bytes

  prizeStrategy: PrizeStrategy!

  prizePeriodStartedTimestamp: BigInt!
  lockBlock: BigInt

  awardedBlock: BigInt
  awardedTimestamp: BigInt

  rngRequestId: BigInt!
  randomNumber: BigInt

  gross: BigInt
  net: BigInt
  reserveFee: BigInt

  winners: [Bytes!]
}

type CompoundPrizePoolBuilder @entity {
  id: ID!

  comptroller: Comptroller!
  trustedForwarder: Bytes!
}

type Ticket @entity {
  id: ID!

  prizeStrategy: PrizeStrategy!

  name: String!
  symbol: String!
  decimals: BigInt!
}

type Sponsorship @entity {
  id: ID!

  prizeStrategy: PrizeStrategy!

  name: String!
  symbol: String!
  decimals: BigInt!
}

type Player @entity {
  id: ID!
  prizePool: PrizePool!
  address: Bytes!

  balance: BigInt!
  timelockedBalance: BigInt!
  unlockTimestamp: BigInt!
}

type DripTokenPlayer @entity {
  id: ID!
  comptroller: Comptroller!
  dripToken: Bytes!
  address: Bytes!

  # claimable balance
  balance: BigInt!
}

type BalanceDripPlayer @entity {
  id: ID!
  balanceDrip: BalanceDrip!
  address: Bytes!

  lastExchangeRateMantissa: BigInt!
}

type BalanceDrip @entity {
  id: ID!
  prizePool: PrizePool!
  measureToken: Bytes!
  dripToken: Bytes!

  dripRatePerSecond: BigInt
  exchangeRateMantissa: BigInt
  timestamp: BigInt

  players: [BalanceDripPlayer!]! @derivedFrom(field: "balanceDrip")

  deactivated: Boolean!
}


# type VolumeDrip @entity {
#   id: ID!
#   prizePool: PrizePool!
#   index: BigInt!

#   measureToken: Bytes
#   dripToken: Bytes

#   periodSeconds: BigInt
#   dripAmount: BigInt
#   referral: Boolean

#   periods: [VolumeDripPeriod!]! @derivedFrom(field: "volumeDrip")

#   deactivated: Boolean!
# }

# type VolumeDripPeriod @entity {
#   id: ID!

#   startTime: BigInt!
#   totalSupply: BigInt!

#   volumeDrip: VolumeDrip!
# }

# type PlayerVolumeDrip @entity {
#   id: ID!

#   player: Player!
#   volumeDrip: VolumeDrip!

#   balance: BigInt!
#   period: BigInt!
#   accrued: BigInt!
# }
