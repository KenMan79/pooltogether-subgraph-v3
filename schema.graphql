enum PrizePoolState {
  Opened
  Started
  Awarded
}

enum YieldServiceTokenType {
  cToken
}

type PrizePoolBuilder @entity {
  id: ID!
  trustedForwarder: Bytes!

  controlledTokenFactory: Bytes!
  compoundPeriodicPrizePoolFactory: Bytes!
  ticketFactory: Bytes!

  governor: Bytes!
  rng: Bytes!
}

type SingleRandomWinnerPrizePoolBuilder @entity {
  id: ID!

  prizePoolBuilder: PrizePoolBuilder!
  prizeStrategyFactory: Bytes!
}

type PrizePool @entity {
  id: ID!

  creator: Bytes!

  yieldToken: Bytes!
  yieldTokenName: String!
  yieldTokenSymbol: String!
  
  underlyingCollateralToken: Bytes!
  underlyingCollateralName: String!
  underlyingCollateralSymbol: String!

  prizePoolBuilder: PrizePoolBuilder!
  ticket: Bytes!
  sponsorship: Bytes!
  prizeStrategy: Bytes!
  rng: Bytes!


  currentState: PrizePoolState!
  currentPrizeId: BigInt!

  prizePeriodSeconds: BigInt!
  prizePeriodStartedAt: BigInt!

  previousPrize: BigInt
  previousPrizeAverageTickets: BigInt

  feeScaleMantissa: BigInt
  rngRequestId: BigInt

  tickets: [Prize!]! @derivedFrom(field: "prizePool")
  sponsorships: [Player!]! @derivedFrom(field: "prizePool")

  prizes: [Prize!]! @derivedFrom(field: "prizePool")
  players: [Player!]! @derivedFrom(field: "prizePool")

  # draws: [Draw!]! @derivedFrom(field: "poolContract")
  # admins: [Admin!]! @derivedFrom(field: "poolContract")
}

type Ticket @entity {
  id: ID!
  
  prizePool: PrizePool!
  
  name: String!
  symbol: String!
  decimals: BigInt!
}

type Sponsorship @entity {
  id: ID!

  prizePool: PrizePool!

  name: String!
  symbol: String!
  decimals: BigInt!
}

# type Token @entity {
#   id: ID!

#   name: String!
#   symbol: String!

#   decimals: BigInt!
# }

# type YieldService @entity {
#   id: ID!

#   prizePool: PrizePool!

#   # token: Token!
#   # yieldServiceToken: YieldServiceToken!

#   # accountedBalance: BigInt!
#   # balance: BigInt!
#   # unaccountedBalance: BigInt!

#   # supplyRatePerBlock: BigInt
# }

# type YieldServiceToken @entity {
#   id: ID!

#   token: Token!
#   type: YieldServiceTokenType!

#   prizePool: PrizePool!
# }


# Ephemeral Types (not mapped to a specific contract)

# ID: `${prizePool.address}-${msg.sender.address}`
type Player @entity {
  id: ID!

  address: Bytes!
  prizePool: PrizePool!
  
  balance: BigInt!

  timelockedBalance: BigInt!
  unlockTimestamp: BigInt!
}

# ID: `${prizePool.address}-${prizeId}`
type Prize @entity {
  id: ID!
  prizePool: PrizePool!

  prize: BigInt
  reserveFee: BigInt
  rngRequestId: BigInt
  randomNumber: Bytes
  rewardStartedOperator: Bytes
  rewardCompletedOperator: Bytes

  winners: [Player!]
}

# type Sponsor @entity {
#   id: ID! 
#   address: Bytes!
#   poolContract: PoolContract!
#   sponsorshipAndFeeBalance: BigInt!
# }
