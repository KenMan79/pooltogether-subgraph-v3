enum PrizePoolState {
  Opened
  Started
  Awarded
}

enum PrizePoolType {
  Compound
}


type Comptroller @entity {
  id: ID!
  reserveRateMantissa: BigInt!
}

type PrizeStrategy @entity {
  id: ID!

  creator: Bytes!
  compoundPrizePoolBuilder: CompoundPrizePoolBuilder!

  prizePool: PrizePool!
  ticket: Bytes!
  rng: Bytes!
  sponsorship: Bytes!
  # trustedForwarder: Bytes!
  comptroller: Bytes!

  currentPrizeId: BigInt!
  currentState: PrizePoolState!

  prizePeriodSeconds: BigInt!

  exitFeeMantissa: BigInt!
  creditRateMantissa: BigInt!

  balanceDrips: [BalanceDrip!]! @derivedFrom(field: "prizeStrategy")
  volumeDrips: [VolumeDrip!]! @derivedFrom(field: "prizeStrategy")
  referralVolumeDrips: [VolumeDrip!]! @derivedFrom(field: "prizeStrategy")

  prizesCount: BigInt!
  prizes: [Prize!]! @derivedFrom(field: "prizeStrategy")
}

type BalanceDrip @entity {
  id: ID!
  prizeStrategy: PrizeStrategy!
  measureToken: Bytes!
  dripToken: Bytes!

  dripRatePerSecond: BigInt
  removed: Boolean!
}

type VolumeDrip @entity {
  id: ID!
  prizeStrategy: PrizeStrategy!
  index: BigInt!

  measureToken: Bytes
  dripToken: Bytes
  periodSeconds: BigInt
  dripAmount: BigInt
  referral: Boolean

  periods: [VolumeDripPeriod!]! @derivedFrom(field: "volumeDrip")
}

type VolumeDripPeriod @entity {
  id: ID!

  startTime: BigInt!
  totalSupply: BigInt!

  volumeDrip: VolumeDrip!
}

type PlayerBalanceDrip @entity {
  id: ID!

  player: Player!
  balanceDrip: BalanceDrip!

  lastExchangeRateMantissa: BigInt
  dripBalance: BigInt
}

type PlayerVolumeDrip @entity {
  id: ID!

  player: Player!
  volumeDrip: VolumeDrip!

  balance: BigInt!
  period: BigInt!
  accrued: BigInt!
}

type PrizePool @entity {
  id: ID!

  # trustedForwarder: Bytes!
  prizeStrategy: PrizeStrategy!

  # yieldToken: Bytes!
  # yieldDecimals: BigInt!
  # yieldName: String!
  # yieldSymbol: String!

  underlyingCollateralToken: Bytes!
  underlyingCollateralDecimals: BigInt!
  underlyingCollateralName: String!
  underlyingCollateralSymbol: String!

  maxExitFeeMantissa: BigInt
  maxTimelockDuration: BigInt!
  timelockTotalSupply: BigInt!

  playerCount: BigInt!
  totalSupply: BigInt! # move to PrizePool.Ticket relationship

  # previousPrize: BigInt

  # sponsorships: [Sponsor!]! @derivedFrom(field: "prizePool")
  players: [Player!]! @derivedFrom(field: "prizePool")
}

# ID: `${prizePool.address}-${msg.sender.address}`
# dynamically generated type, not mapped to a specific contract
type Player @entity {
  id: ID!

  balance: BigInt!

  timelockedBalance: BigInt!
  unlockTimestamp: BigInt!

  address: Bytes!
  prizePool: PrizePool!
}

type CompoundPrizePoolBuilder @entity {
  id: ID!

  trustedForwarder: Bytes!
  comptroller: Bytes!
  rng: Bytes!

  # controlledTokenFactory: Bytes!
  # compoundPeriodicPrizePoolFactory: Bytes!
  # ticketFactory: Bytes!
}

type Ticket @entity {
  id: ID!

  prizeStrategy: PrizeStrategy!

  name: String!
  symbol: String!
  decimals: BigInt!
}

type Sponsorship @entity {
  id: ID!

  prizeStrategy: PrizeStrategy!

  name: String!
  symbol: String!
  decimals: BigInt!
}

# type Token @entity {
#   id: ID!

#   name: String!
#   symbol: String!

#   decimals: BigInt!
# }


# ID: `${prizePool.address}-${prizeId}`
# dynamically generated type, not mapped to a specific contract
type Prize @entity {
  id: ID!

  awardStartOperator: Bytes
  awardedOperator: Bytes

  prizeStrategy: PrizeStrategy!

  prizePeriodStartedTimestamp: BigInt!
  lockBlock: BigInt

  awardedBlock: BigInt
  awardedTimestamp: BigInt

  rngRequestId: BigInt!
  randomNumber: BigInt

  gross: BigInt
  net: BigInt
  reserveFee: BigInt

  winners: [Player!]
}

# type Sponsor @entity {
#   id: ID!
#   address: Bytes!
#   poolContract: PoolContract!
#   sponsorshipAndFeeBalance: BigInt!
# }
